
JuniorProject_AutomaticTargettingSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000579c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005964  08005964  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005964  08005964  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005964  08005964  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800596c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000060  080059c8  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080059c8  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d09f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f99  00000000  00000000  0002d167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0002f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1f  00000000  00000000  0002fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183f1  00000000  00000000  0003080f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f39b  00000000  00000000  00048c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b1a6  00000000  00000000  00057f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cdc  00000000  00000000  000e3144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000e6e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005894 	.word	0x08005894

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005894 	.word	0x08005894

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if(!bool_started){
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <HAL_UART_RxCpltCallback+0xec>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d112      	bne.n	8000a72 <HAL_UART_RxCpltCallback+0x36>
		if(start_char == 'a'){
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <HAL_UART_RxCpltCallback+0xf0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b61      	cmp	r3, #97	; 0x61
 8000a52:	d108      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0x2a>
			bool_started = 1;
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <HAL_UART_RxCpltCallback+0xec>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, projected_points, 6);
 8000a5a:	2206      	movs	r2, #6
 8000a5c:	4934      	ldr	r1, [pc, #208]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000a5e:	4835      	ldr	r0, [pc, #212]	; (8000b34 <HAL_UART_RxCpltCallback+0xf8>)
 8000a60:	f003 fb33 	bl	80040ca <HAL_UART_Receive_DMA>
			return;
 8000a64:	e05c      	b.n	8000b20 <HAL_UART_RxCpltCallback+0xe4>
		}else{
			HAL_UART_Receive_DMA(&huart3, &start_char, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	4930      	ldr	r1, [pc, #192]	; (8000b2c <HAL_UART_RxCpltCallback+0xf0>)
 8000a6a:	4832      	ldr	r0, [pc, #200]	; (8000b34 <HAL_UART_RxCpltCallback+0xf8>)
 8000a6c:	f003 fb2d 	bl	80040ca <HAL_UART_Receive_DMA>
			return;
 8000a70:	e056      	b.n	8000b20 <HAL_UART_RxCpltCallback+0xe4>
		}

	}else{
		HAL_UART_Transmit(&huart3, projected_points, 6, 100);
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	2206      	movs	r2, #6
 8000a76:	492e      	ldr	r1, [pc, #184]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000a78:	482e      	ldr	r0, [pc, #184]	; (8000b34 <HAL_UART_RxCpltCallback+0xf8>)
 8000a7a:	f003 faa3 	bl	8003fc4 <HAL_UART_Transmit>

		for (int i = 0; i < 6; i++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e014      	b.n	8000aae <HAL_UART_RxCpltCallback+0x72>
			if (projected_points[i] < '0' || projected_points[i] > '9') {
 8000a84:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a8e:	d905      	bls.n	8000a9c <HAL_UART_RxCpltCallback+0x60>
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b39      	cmp	r3, #57	; 0x39
 8000a9a:	d905      	bls.n	8000aa8 <HAL_UART_RxCpltCallback+0x6c>
				HAL_UART_Receive_DMA(&huart3, projected_points, 6);  // Restart DMA reception
 8000a9c:	2206      	movs	r2, #6
 8000a9e:	4924      	ldr	r1, [pc, #144]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000aa0:	4824      	ldr	r0, [pc, #144]	; (8000b34 <HAL_UART_RxCpltCallback+0xf8>)
 8000aa2:	f003 fb12 	bl	80040ca <HAL_UART_Receive_DMA>
				return;
 8000aa6:	e03b      	b.n	8000b20 <HAL_UART_RxCpltCallback+0xe4>
		for (int i = 0; i < 6; i++) {
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	dde7      	ble.n	8000a84 <HAL_UART_RxCpltCallback+0x48>
			}
		}

		int base_coord = (int)(projected_points[0] - '0') * 100 +
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3b30      	subs	r3, #48	; 0x30
 8000aba:	2264      	movs	r2, #100	; 0x64
 8000abc:	fb02 f103 	mul.w	r1, r2, r3
						(int)(projected_points[1] - '0') * 10  +
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
		int base_coord = (int)(projected_points[0] - '0') * 100 +
 8000ad0:	18ca      	adds	r2, r1, r3
						(int)(projected_points[2] - '0');
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	3b30      	subs	r3, #48	; 0x30
		int base_coord = (int)(projected_points[0] - '0') * 100 +
 8000ad8:	4413      	add	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]

		int tilt_coord = (int)(projected_points[3] - '0') * 100 +
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000ade:	78db      	ldrb	r3, [r3, #3]
 8000ae0:	3b30      	subs	r3, #48	; 0x30
 8000ae2:	2264      	movs	r2, #100	; 0x64
 8000ae4:	fb02 f103 	mul.w	r1, r2, r3
						(int)(projected_points[4] - '0') * 10  +
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
		int tilt_coord = (int)(projected_points[3] - '0') * 100 +
 8000af8:	18ca      	adds	r2, r1, r3
						(int)(projected_points[5] - '0');
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_UART_RxCpltCallback+0xf4>)
 8000afc:	795b      	ldrb	r3, [r3, #5]
 8000afe:	3b30      	subs	r3, #48	; 0x30
		int tilt_coord = (int)(projected_points[3] - '0') * 100 +
 8000b00:	4413      	add	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

		base_proj_point = base_coord;
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_UART_RxCpltCallback+0xfc>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	6013      	str	r3, [r2, #0]
		tilt_proj_point = tilt_coord;
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <HAL_UART_RxCpltCallback+0x100>)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6013      	str	r3, [r2, #0]

		bool_started = 0;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_UART_RxCpltCallback+0xec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &start_char, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	4904      	ldr	r1, [pc, #16]	; (8000b2c <HAL_UART_RxCpltCallback+0xf0>)
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_UART_RxCpltCallback+0xf8>)
 8000b1c:	f003 fad5 	bl	80040ca <HAL_UART_Receive_DMA>
	}
}
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001ef 	.word	0x200001ef
 8000b2c:	200001ee 	.word	0x200001ee
 8000b30:	200001e8 	.word	0x200001e8
 8000b34:	20000154 	.word	0x20000154
 8000b38:	200001e0 	.word	0x200001e0
 8000b3c:	200001e4 	.word	0x200001e4

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0be      	sub	sp, #248	; 0xf8
 8000b44:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f001 f997 	bl	8001e78 <HAL_Init>

  /* USER CODE BEGIN Init */

  // 0.095 0.07 0.05 + 0.01
  // 0.04 0.035 0.025
  PID(&basePID, &posIn1, &spOut1, &goal1, 0.095, 0.07, 0.05, _PID_P_ON_E, _PID_CD_DIRECT);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9307      	str	r3, [sp, #28]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	9306      	str	r3, [sp, #24]
 8000b52:	a37d      	add	r3, pc, #500	; (adr r3, 8000d48 <main+0x208>)
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000b5c:	a37c      	add	r3, pc, #496	; (adr r3, 8000d50 <main+0x210>)
 8000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b66:	a37c      	add	r3, pc, #496	; (adr r3, 8000d58 <main+0x218>)
 8000b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8000b70:	4b85      	ldr	r3, [pc, #532]	; (8000d88 <main+0x248>)
 8000b72:	4a86      	ldr	r2, [pc, #536]	; (8000d8c <main+0x24c>)
 8000b74:	4986      	ldr	r1, [pc, #536]	; (8000d90 <main+0x250>)
 8000b76:	4887      	ldr	r0, [pc, #540]	; (8000d94 <main+0x254>)
 8000b78:	f000 fc36 	bl	80013e8 <PID>
  PID(&tiltPID, &posIn2, &spOut2, &goal2, 0.04, 0.035, 0.025, _PID_P_ON_E, _PID_CD_DIRECT);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9307      	str	r3, [sp, #28]
 8000b80:	2301      	movs	r3, #1
 8000b82:	9306      	str	r3, [sp, #24]
 8000b84:	a376      	add	r3, pc, #472	; (adr r3, 8000d60 <main+0x220>)
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000b8e:	a376      	add	r3, pc, #472	; (adr r3, 8000d68 <main+0x228>)
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b98:	a375      	add	r3, pc, #468	; (adr r3, 8000d70 <main+0x230>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8000ba2:	4b7d      	ldr	r3, [pc, #500]	; (8000d98 <main+0x258>)
 8000ba4:	4a7d      	ldr	r2, [pc, #500]	; (8000d9c <main+0x25c>)
 8000ba6:	497e      	ldr	r1, [pc, #504]	; (8000da0 <main+0x260>)
 8000ba8:	487e      	ldr	r0, [pc, #504]	; (8000da4 <main+0x264>)
 8000baa:	f000 fc1d 	bl	80013e8 <PID>

  PID_SetMode(&basePID, _PID_MODE_AUTOMATIC);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4878      	ldr	r0, [pc, #480]	; (8000d94 <main+0x254>)
 8000bb2:	f000 fd5d 	bl	8001670 <PID_SetMode>
  PID_SetSampleTime(&basePID, 500);
 8000bb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bba:	4876      	ldr	r0, [pc, #472]	; (8000d94 <main+0x254>)
 8000bbc:	f000 fec6 	bl	800194c <PID_SetSampleTime>
  PID_SetOutputLimits(&basePID, -0.15, 0.15);
 8000bc0:	a36d      	add	r3, pc, #436	; (adr r3, 8000d78 <main+0x238>)
 8000bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc6:	e9cd 2300 	strd	r2, r3, [sp]
 8000bca:	a36d      	add	r3, pc, #436	; (adr r3, 8000d80 <main+0x240>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	4870      	ldr	r0, [pc, #448]	; (8000d94 <main+0x254>)
 8000bd2:	f000 fd6b 	bl	80016ac <PID_SetOutputLimits>

  PID_SetMode(&tiltPID, _PID_MODE_AUTOMATIC);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4872      	ldr	r0, [pc, #456]	; (8000da4 <main+0x264>)
 8000bda:	f000 fd49 	bl	8001670 <PID_SetMode>
  PID_SetSampleTime(&tiltPID, 500);
 8000bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be2:	4870      	ldr	r0, [pc, #448]	; (8000da4 <main+0x264>)
 8000be4:	f000 feb2 	bl	800194c <PID_SetSampleTime>
  PID_SetOutputLimits(&tiltPID, -0.15, 0.15);
 8000be8:	a363      	add	r3, pc, #396	; (adr r3, 8000d78 <main+0x238>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	e9cd 2300 	strd	r2, r3, [sp]
 8000bf2:	a363      	add	r3, pc, #396	; (adr r3, 8000d80 <main+0x240>)
 8000bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf8:	486a      	ldr	r0, [pc, #424]	; (8000da4 <main+0x264>)
 8000bfa:	f000 fd57 	bl	80016ac <PID_SetOutputLimits>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 f8e9 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f000 fa81 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c06:	f000 fa61 	bl	80010cc <MX_DMA_Init>
  MX_TIM2_Init();
 8000c0a:	f000 f929 	bl	8000e60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c0e:	f000 f98b 	bl	8000f28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c12:	f000 f9dd 	bl	8000fd0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000c16:	f000 fa2f 	bl	8001078 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4862      	ldr	r0, [pc, #392]	; (8000da8 <main+0x268>)
 8000c1e:	f002 fb39 	bl	8003294 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c22:	2104      	movs	r1, #4
 8000c24:	4860      	ldr	r0, [pc, #384]	; (8000da8 <main+0x268>)
 8000c26:	f002 fb35 	bl	8003294 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c2a:	213c      	movs	r1, #60	; 0x3c
 8000c2c:	485f      	ldr	r0, [pc, #380]	; (8000dac <main+0x26c>)
 8000c2e:	f002 fc75 	bl	800351c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c32:	213c      	movs	r1, #60	; 0x3c
 8000c34:	485e      	ldr	r0, [pc, #376]	; (8000db0 <main+0x270>)
 8000c36:	f002 fc71 	bl	800351c <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_DMA(&huart3, &start_char, 1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	495d      	ldr	r1, [pc, #372]	; (8000db4 <main+0x274>)
 8000c3e:	485e      	ldr	r0, [pc, #376]	; (8000db8 <main+0x278>)
 8000c40:	f003 fa43 	bl	80040ca <HAL_UART_Receive_DMA>

  //uint8_t MSGTIM4BaseMotor[50] = {'\0'};
  //uint8_t MSGTIM3TiltMotor[50] = {'\0'};

  uint8_t MSGsp1[50] = {'\0'};
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000c4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c4e:	222e      	movs	r2, #46	; 0x2e
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f98c 	bl	8004f70 <memset>
  uint8_t MSGsp2[50] = {'\0'};
 8000c58:	2300      	movs	r3, #0
 8000c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c60:	222e      	movs	r2, #46	; 0x2e
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f983 	bl	8004f70 <memset>
  uint8_t MSGsp3[50] = {'\0'};
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c72:	222e      	movs	r2, #46	; 0x2e
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 f97a 	bl	8004f70 <memset>
  uint8_t MSGsp4[50] = {'\0'};
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	222e      	movs	r2, #46	; 0x2e
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 f972 	bl	8004f70 <memset>

  int base_set_point = 320;
 8000c8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  int tilt_set_point = 200;
 8000c94:	23c8      	movs	r3, #200	; 0xc8
 8000c96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  base_proj_point = 320;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <main+0x27c>)
 8000c9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ca0:	601a      	str	r2, [r3, #0]
  tilt_proj_point = 200;
 8000ca2:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <main+0x280>)
 8000ca4:	22c8      	movs	r2, #200	; 0xc8
 8000ca6:	601a      	str	r2, [r3, #0]
  {


	  //sprintf(MSGTIM4BaseMotor, "Base Encoder Ticks = %d, ", TIM4->CNT);
	  //sprintf(MSGTIM3TiltMotor, "Tilt Encoder Ticks = %d ", TIM3->CNT);
	  sprintf(MSGsp1, "Base Proj Point = %d, ", base_proj_point);
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <main+0x27c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb0:	4944      	ldr	r1, [pc, #272]	; (8000dc4 <main+0x284>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 f93c 	bl	8004f30 <siprintf>
	  sprintf(MSGsp2, "Tilt Proj Point = %d, ", tilt_proj_point);
 8000cb8:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <main+0x280>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cc0:	4941      	ldr	r1, [pc, #260]	; (8000dc8 <main+0x288>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f004 f934 	bl	8004f30 <siprintf>
	  sprintf(MSGsp3, "Base PID Out = %d, ", (int)(TIM2->CCR1));
 8000cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cd4:	493d      	ldr	r1, [pc, #244]	; (8000dcc <main+0x28c>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 f92a 	bl	8004f30 <siprintf>
	  sprintf(MSGsp4, "Tilt PID Out = %d\n\r", (int)(TIM2->CCR2));
 8000cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	493a      	ldr	r1, [pc, #232]	; (8000dd0 <main+0x290>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 f921 	bl	8004f30 <siprintf>

	  //HAL_UART_Transmit(&huart3, MSGTIM4BaseMotor, sizeof(MSGTIM4BaseMotor), 100);
	  //HAL_UART_Transmit(&huart3, MSGTIM3TiltMotor, sizeof(MSGTIM3TiltMotor), 100);

	  HAL_UART_Transmit(&huart3, MSGsp1, sizeof(MSGsp1), 100);
 8000cee:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	2232      	movs	r2, #50	; 0x32
 8000cf6:	4830      	ldr	r0, [pc, #192]	; (8000db8 <main+0x278>)
 8000cf8:	f003 f964 	bl	8003fc4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, MSGsp2, sizeof(MSGsp2), 100);
 8000cfc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2232      	movs	r2, #50	; 0x32
 8000d04:	482c      	ldr	r0, [pc, #176]	; (8000db8 <main+0x278>)
 8000d06:	f003 f95d 	bl	8003fc4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, MSGsp3, sizeof(MSGsp3), 100);
 8000d0a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d0e:	2364      	movs	r3, #100	; 0x64
 8000d10:	2232      	movs	r2, #50	; 0x32
 8000d12:	4829      	ldr	r0, [pc, #164]	; (8000db8 <main+0x278>)
 8000d14:	f003 f956 	bl	8003fc4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, MSGsp4, sizeof(MSGsp4), 100);
 8000d18:	4639      	mov	r1, r7
 8000d1a:	2364      	movs	r3, #100	; 0x64
 8000d1c:	2232      	movs	r2, #50	; 0x32
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <main+0x278>)
 8000d20:	f003 f950 	bl	8003fc4 <HAL_UART_Transmit>

	  runMotors(&basePID, &tiltPID, base_proj_point, tilt_proj_point, base_set_point, tilt_set_point);
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <main+0x27c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <main+0x280>)
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	491a      	ldr	r1, [pc, #104]	; (8000da4 <main+0x264>)
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <main+0x254>)
 8000d3e:	f000 fa4b 	bl	80011d8 <runMotors>
	  sprintf(MSGsp1, "Base Proj Point = %d, ", base_proj_point);
 8000d42:	e7b1      	b.n	8000ca8 <main+0x168>
 8000d44:	f3af 8000 	nop.w
 8000d48:	9999999a 	.word	0x9999999a
 8000d4c:	3fa99999 	.word	0x3fa99999
 8000d50:	1eb851ec 	.word	0x1eb851ec
 8000d54:	3fb1eb85 	.word	0x3fb1eb85
 8000d58:	851eb852 	.word	0x851eb852
 8000d5c:	3fb851eb 	.word	0x3fb851eb
 8000d60:	9999999a 	.word	0x9999999a
 8000d64:	3f999999 	.word	0x3f999999
 8000d68:	1eb851ec 	.word	0x1eb851ec
 8000d6c:	3fa1eb85 	.word	0x3fa1eb85
 8000d70:	47ae147b 	.word	0x47ae147b
 8000d74:	3fa47ae1 	.word	0x3fa47ae1
 8000d78:	33333333 	.word	0x33333333
 8000d7c:	3fc33333 	.word	0x3fc33333
 8000d80:	33333333 	.word	0x33333333
 8000d84:	bfc33333 	.word	0xbfc33333
 8000d88:	200002f0 	.word	0x200002f0
 8000d8c:	200002e0 	.word	0x200002e0
 8000d90:	200002d0 	.word	0x200002d0
 8000d94:	200001f0 	.word	0x200001f0
 8000d98:	200002f8 	.word	0x200002f8
 8000d9c:	200002e8 	.word	0x200002e8
 8000da0:	200002d8 	.word	0x200002d8
 8000da4:	20000260 	.word	0x20000260
 8000da8:	2000007c 	.word	0x2000007c
 8000dac:	200000c4 	.word	0x200000c4
 8000db0:	2000010c 	.word	0x2000010c
 8000db4:	200001ee 	.word	0x200001ee
 8000db8:	20000154 	.word	0x20000154
 8000dbc:	200001e0 	.word	0x200001e0
 8000dc0:	200001e4 	.word	0x200001e4
 8000dc4:	080058ac 	.word	0x080058ac
 8000dc8:	080058c4 	.word	0x080058c4
 8000dcc:	080058dc 	.word	0x080058dc
 8000dd0:	080058f0 	.word	0x080058f0

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 f8c4 	bl	8004f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fdd9 	bl	80029d4 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e28:	f000 f9d0 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f846 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e52:	f000 f9bb 	bl	80011cc <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3740      	adds	r7, #64	; 0x40
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eaa:	481e      	ldr	r0, [pc, #120]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000eac:	f002 f9a2 	bl	80031f4 <HAL_TIM_PWM_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eb6:	f000 f989 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4816      	ldr	r0, [pc, #88]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000eca:	f002 ffbb 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ed4:	f000 f97a 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed8:	2360      	movs	r3, #96	; 0x60
 8000eda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 8000edc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000ef2:	f002 fca9 	bl	8003848 <HAL_TIM_PWM_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000efc:	f000 f966 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2204      	movs	r2, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4807      	ldr	r0, [pc, #28]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000f08:	f002 fc9e 	bl	8003848 <HAL_TIM_PWM_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f12:	f000 f95b 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <MX_TIM2_Init+0xc4>)
 8000f18:	f000 fe1e 	bl	8001b58 <HAL_TIM_MspPostInit>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000007c 	.word	0x2000007c

08000f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2224      	movs	r2, #36	; 0x24
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 f81a 	bl	8004f70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <MX_TIM3_Init+0xa4>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 800;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f58:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000f96:	f002 fa1f 	bl	80033d8 <HAL_TIM_Encoder_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f000 f914 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM3_Init+0xa0>)
 8000fb2:	f002 ff47 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fbc:	f000 f906 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	; 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000c4 	.word	0x200000c4
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 ffc6 	bl	8004f70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <MX_TIM4_Init+0xa0>)
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <MX_TIM4_Init+0xa4>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_TIM4_Init+0xa0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_TIM4_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4148;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM4_Init+0xa0>)
 8001000:	f241 0234 	movw	r2, #4148	; 0x1034
 8001004:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM4_Init+0xa0>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_TIM4_Init+0xa0>)
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001012:	2303      	movs	r3, #3
 8001014:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800101a:	2301      	movs	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001022:	230a      	movs	r3, #10
 8001024:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800102a:	2301      	movs	r3, #1
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001032:	230a      	movs	r3, #10
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_TIM4_Init+0xa0>)
 800103e:	f002 f9cb 	bl	80033d8 <HAL_TIM_Encoder_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001048:	f000 f8c0 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM4_Init+0xa0>)
 800105a:	f002 fef3 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001064:	f000 f8b2 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	; 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000010c 	.word	0x2000010c
 8001074:	40000800 	.word	0x40000800

08001078 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_USART3_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 8001084:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART3_UART_Init+0x4c>)
 80010b0:	f002 ff38 	bl	8003f24 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f000 f887 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000154 	.word	0x20000154
 80010c8:	40004800 	.word	0x40004800

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_DMA_Init+0x38>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <MX_DMA_Init+0x38>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_DMA_Init+0x38>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	200d      	movs	r0, #13
 80010f0:	f000 fffb 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010f4:	200d      	movs	r0, #13
 80010f6:	f001 f814 	bl	8002122 <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_GPIO_Init+0xb8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <MX_GPIO_Init+0xb8>)
 8001122:	f043 0320 	orr.w	r3, r3, #32
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MX_GPIO_Init+0xb8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_GPIO_Init+0xb8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <MX_GPIO_Init+0xb8>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_GPIO_Init+0xb8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_GPIO_Init+0xb8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <MX_GPIO_Init+0xb8>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_GPIO_Init+0xb8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorB1_Pin|motorA1_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <MX_GPIO_Init+0xbc>)
 800116c:	f001 fc1a 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, motorB2_Pin|motorA2_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_GPIO_Init+0xc0>)
 8001178:	f001 fc14 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motorB1_Pin motorA1_Pin */
  GPIO_InitStruct.Pin = motorB1_Pin|motorA1_Pin;
 800117c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_GPIO_Init+0xbc>)
 8001196:	f001 fa81 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : motorB2_Pin motorA2_Pin */
  GPIO_InitStruct.Pin = motorB2_Pin|motorA2_Pin;
 800119a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_GPIO_Init+0xc0>)
 80011b4:	f001 fa72 	bl	800269c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40010800 	.word	0x40010800

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <runMotors>:
// Constants
#define FULL_DIM_X 640
#define FULL_DIM_Y 400
#define PWM_MAX_VALUE 65535

void runMotors(PID_TypeDef *basePID, PID_TypeDef *tiltPID, int base_proj_point, int tilt_proj_point, int base_set_point, int tilt_set_point){
 80011d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]

	*basePID->MyInput = base_proj_point;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f901 	bl	80003f4 <__aeabi_i2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	e9c6 2300 	strd	r2, r3, [r6]
	*basePID->MySetpoint = base_set_point;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80011fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001200:	f7ff f8f8 	bl	80003f4 <__aeabi_i2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	e9c6 2300 	strd	r2, r3, [r6]
	PID_Compute(basePID, FULL_DIM_X);
 800120c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f931 	bl	8001478 <PID_Compute>

	*tiltPID->MyInput = tilt_proj_point;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff f8ea 	bl	80003f4 <__aeabi_i2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	e9c6 2300 	strd	r2, r3, [r6]
	*tiltPID->MySetpoint = tilt_set_point;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 800122c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800122e:	f7ff f8e1 	bl	80003f4 <__aeabi_i2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c6 2300 	strd	r2, r3, [r6]
	PID_Compute(tiltPID, FULL_DIM_Y);
 800123a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f000 f91a 	bl	8001478 <PID_Compute>

	//Base Motor Dir Set
	if(*basePID->MyOutput <= 0){
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f7ff fbb4 	bl	80009c0 <__aeabi_dcmple>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <runMotors+0xa0>
		HAL_GPIO_WritePin(motorA1_GPIO_Port, motorA1_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <runMotors+0x190>)
 8001266:	f001 fb9d 	bl	80029a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorB1_GPIO_Port, motorB1_Pin, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001270:	483d      	ldr	r0, [pc, #244]	; (8001368 <runMotors+0x190>)
 8001272:	f001 fb97 	bl	80029a4 <HAL_GPIO_WritePin>
 8001276:	e00b      	b.n	8001290 <runMotors+0xb8>
	}else{
		HAL_GPIO_WritePin(motorA1_GPIO_Port, motorA1_Pin, 1);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	483a      	ldr	r0, [pc, #232]	; (8001368 <runMotors+0x190>)
 8001280:	f001 fb90 	bl	80029a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorB1_GPIO_Port, motorB1_Pin, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4837      	ldr	r0, [pc, #220]	; (8001368 <runMotors+0x190>)
 800128c:	f001 fb8a 	bl	80029a4 <HAL_GPIO_WritePin>
	}

	//Tilt Motor Dir Set
	if(*tiltPID->MyOutput <= 0){
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	f7ff fb8e 	bl	80009c0 <__aeabi_dcmple>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00c      	beq.n	80012c4 <runMotors+0xec>
		HAL_GPIO_WritePin(motorA2_GPIO_Port, motorA2_Pin, 1);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	482e      	ldr	r0, [pc, #184]	; (800136c <runMotors+0x194>)
 80012b2:	f001 fb77 	bl	80029a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorB2_GPIO_Port, motorB2_Pin, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012bc:	482b      	ldr	r0, [pc, #172]	; (800136c <runMotors+0x194>)
 80012be:	f001 fb71 	bl	80029a4 <HAL_GPIO_WritePin>
 80012c2:	e00b      	b.n	80012dc <runMotors+0x104>
	}else{
		HAL_GPIO_WritePin(motorA2_GPIO_Port, motorA2_Pin, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ca:	4828      	ldr	r0, [pc, #160]	; (800136c <runMotors+0x194>)
 80012cc:	f001 fb6a 	bl	80029a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorB2_GPIO_Port, motorB2_Pin, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4825      	ldr	r0, [pc, #148]	; (800136c <runMotors+0x194>)
 80012d8:	f001 fb64 	bl	80029a4 <HAL_GPIO_WritePin>
	}

	//Speed set
	TIM2->CCR1 = (fabs(*basePID->MyOutput) + 0.01)*PWM_MAX_VALUE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	4690      	mov	r8, r2
 80012e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80012ea:	a31b      	add	r3, pc, #108	; (adr r3, 8001358 <runMotors+0x180>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	4640      	mov	r0, r8
 80012f2:	4649      	mov	r1, r9
 80012f4:	f7fe ff32 	bl	800015c <__adddf3>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	a317      	add	r3, pc, #92	; (adr r3, 8001360 <runMotors+0x188>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f8df 	bl	80004c8 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb71 	bl	80009fc <__aeabi_d2uiz>
 800131a:	4603      	mov	r3, r0
 800131c:	6373      	str	r3, [r6, #52]	; 0x34
	TIM2->CCR2 = (fabs(*tiltPID->MyOutput))*PWM_MAX_VALUE;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	4614      	mov	r4, r2
 8001328:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800132c:	a30c      	add	r3, pc, #48	; (adr r3, 8001360 <runMotors+0x188>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7ff f8c7 	bl	80004c8 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb59 	bl	80009fc <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001358:	47ae147b 	.word	0x47ae147b
 800135c:	3f847ae1 	.word	0x3f847ae1
 8001360:	00000000 	.word	0x00000000
 8001364:	40efffe0 	.word	0x40efffe0
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40010800 	.word	0x40010800

08001370 <PID_Init>:
{
  return (x < y) ? x : y;
}

void PID_Init(PID_TypeDef *uPID)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80013a0:	f7ff fb22 	bl	80009e8 <__aeabi_dcmpgt>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80013b6:	e011      	b.n	80013dc <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80013c4:	f7ff faf2 	bl	80009ac <__aeabi_dcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <PID_Init+0x60>
}
 80013ce:	e005      	b.n	80013dc <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0000      	movs	r0, r0
	...

080013e8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af06      	add	r7, sp, #24
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800140e:	a318      	add	r3, pc, #96	; (adr r3, 8001470 <PID+0x88>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	e9cd 2300 	strd	r2, r3, [sp]
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f943 	bl	80016ac <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2264      	movs	r2, #100	; 0x64
 800142a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800142c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001430:	4619      	mov	r1, r3
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 fa4a 	bl	80018cc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001438:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800143c:	9304      	str	r3, [sp, #16]
 800143e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001442:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800144a:	e9cd 2300 	strd	r2, r3, [sp]
 800144e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f996 	bl	8001784 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001458:	f000 fd66 	bl	8001f28 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
	
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	00000000 	.word	0x00000000
 8001474:	406fe000 	.word	0x406fe000

08001478 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID, int full_dim)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <PID_Compute+0x16>
	{
		return _FALSE;
 800148a:	2300      	movs	r3, #0
 800148c:	e0ec      	b.n	8001668 <PID_Compute+0x1f0>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800148e:	f000 fd4b 	bl	8001f28 <HAL_GetTick>
 8001492:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	6a3a      	ldr	r2, [r7, #32]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f0c0 80de 	bcc.w	8001666 <PID_Compute+0x1ee>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014c2:	f7fe fe49 	bl	8000158 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	e9c7 2304 	strd	r2, r3, [r7, #16]

		dInput  = input - uPID->LastInput;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80014d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d8:	f7fe fe3e 	bl	8000158 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80014f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014f4:	f7fe ffe8 	bl	80004c8 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7fe fe2c 	bl	800015c <__adddf3>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d114      	bne.n	8001540 <PID_Compute+0xc8>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001526:	f7fe ffcf 	bl	80004c8 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7fe fe11 	bl	8000158 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800154c:	f7ff fa4c 	bl	80009e8 <__aeabi_dcmpgt>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMax;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001562:	e010      	b.n	8001586 <PID_Compute+0x10e>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001570:	f7ff fa1c 	bl	80009ac <__aeabi_dcmplt>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <PID_Compute+0x10e>
		{
			uPID->OutputSum = uPID->OutMin;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <PID_Compute+0x12e>
		{
			output = uPID->Kp * error;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001594:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001598:	f7fe ff96 	bl	80004c8 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80015a4:	e005      	b.n	80015b2 <PID_Compute+0x13a>
		}
		else
		{
			output = 0;
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80015be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c2:	f7fe ff81 	bl	80004c8 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fdc3 	bl	8000158 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015da:	f7fe fdbf 	bl	800015c <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		output = output/(full_dim/2);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	0fda      	lsrs	r2, r3, #31
 80015ea:	4413      	add	r3, r2
 80015ec:	105b      	asrs	r3, r3, #1
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff00 	bl	80003f4 <__aeabi_i2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015fc:	f7ff f88e 	bl	800071c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800160e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001612:	f7ff f9e9 	bl	80009e8 <__aeabi_dcmpgt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <PID_Compute+0x1b0>
		{
			output = uPID->OutMax;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001622:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001626:	e00e      	b.n	8001646 <PID_Compute+0x1ce>
		}
		else if (output < uPID->OutMin)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800162e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001632:	f7ff f9bb 	bl	80009ac <__aeabi_dcmplt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <PID_Compute+0x1ce>
		{
			output = uPID->OutMin;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001642:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800164a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800164e:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001658:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <PID_Compute+0x1f0>
		
	}
	else
	{
		return _FALSE;
 8001666:	2300      	movs	r3, #0
	}
	
}
 8001668:	4618      	mov	r0, r3
 800166a:	3730      	adds	r7, #48	; 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bdb0      	pop	{r4, r5, r7, pc}

08001670 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b01      	cmp	r3, #1
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <PID_SetMode+0x2e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe69 	bl	8001370 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	705a      	strb	r2, [r3, #1]
	
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80016b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c0:	f7ff f988 	bl	80009d4 <__aeabi_dcmpge>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d158      	bne.n	800177c <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80016ca:	68f9      	ldr	r1, [r7, #12]
 80016cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016d0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016da:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d04b      	beq.n	800177e <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80016f4:	f7ff f978 	bl	80009e8 <__aeabi_dcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001708:	e9c1 2300 	strd	r2, r3, [r1]
 800170c:	e012      	b.n	8001734 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800171c:	f7ff f946 	bl	80009ac <__aeabi_dcmplt>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001730:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001740:	f7ff f952 	bl	80009e8 <__aeabi_dcmpgt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001756:	e012      	b.n	800177e <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001764:	f7ff f922 	bl	80009ac <__aeabi_dcmplt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800177a:	e000      	b.n	800177e <PID_SetOutputLimits+0xd2>
		return;
 800177c:	bf00      	nop
		}
		else { }
		
	}
	
}
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800179c:	f7ff f906 	bl	80009ac <__aeabi_dcmplt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 808b 	bne.w	80018be <PID_SetTunings2+0x13a>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017b4:	f7ff f8fa 	bl	80009ac <__aeabi_dcmplt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d17f      	bne.n	80018be <PID_SetTunings2+0x13a>
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ca:	f7ff f8ef 	bl	80009ac <__aeabi_dcmplt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d174      	bne.n	80018be <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80017da:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80017dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80017fa:	68f9      	ldr	r1, [r7, #12]
 80017fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001800:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800180a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fdde 	bl	80003d4 <__aeabi_ui2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <PID_SetTunings2+0x144>)
 800181e:	f7fe ff7d 	bl	800071c <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 800182a:	68f9      	ldr	r1, [r7, #12]
 800182c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001830:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001834:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001838:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800183c:	f7fe fe44 	bl	80004c8 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800184a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800184e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001852:	f7fe ff63 	bl	800071c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	78db      	ldrb	r3, [r3, #3]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d12b      	bne.n	80018c0 <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	f7fe fc6f 	bl	8000158 <__aeabi_dsub>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	f7fe fc61 	bl	8000158 <__aeabi_dsub>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018a6:	f04f 0000 	mov.w	r0, #0
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	f7fe fc53 	bl	8000158 <__aeabi_dsub>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	68f9      	ldr	r1, [r7, #12]
 80018b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80018bc:	e000      	b.n	80018c0 <PID_SetTunings2+0x13c>
		return;
 80018be:	bf00      	nop
		
	}
	
}
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	408f4000 	.word	0x408f4000

080018cc <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d02e      	beq.n	800193e <PID_SetControllerDirection+0x72>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d029      	beq.n	800193e <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018f0:	f04f 0000 	mov.w	r0, #0
 80018f4:	f04f 0100 	mov.w	r1, #0
 80018f8:	f7fe fc2e 	bl	8000158 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	f7fe fc20 	bl	8000158 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	f7fe fc12 	bl	8000158 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	70da      	strb	r2, [r3, #3]
	
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd2e      	ble.n	80019ba <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800195c:	6838      	ldr	r0, [r7, #0]
 800195e:	f7fe fd49 	bl	80003f4 <__aeabi_i2d>
 8001962:	4604      	mov	r4, r0
 8001964:	460d      	mov	r5, r1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd32 	bl	80003d4 <__aeabi_ui2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fed0 	bl	800071c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800198a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198e:	f7fe fd9b 	bl	80004c8 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a6:	f7fe feb9 	bl	800071c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080019c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <HAL_MspInit+0x5c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_MspInit+0x5c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_MspInit+0x5c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_MspInit+0x5c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_MspInit+0x60>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_MspInit+0x60>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000

08001a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a38:	d10b      	bne.n	8001a52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_TIM_PWM_MspInit+0x34>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_TIM_PWM_MspInit+0x34>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_TIM_PWM_MspInit+0x34>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d12c      	bne.n	8001ada <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	61d3      	str	r3, [r2, #28]
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4822      	ldr	r0, [pc, #136]	; (8001b4c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ac4:	f000 fdea 	bl	800269c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	201d      	movs	r0, #29
 8001ace:	f000 fb0c 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ad2:	201d      	movs	r0, #29
 8001ad4:	f000 fb25 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ad8:	e030      	b.n	8001b3c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d12b      	bne.n	8001b3c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	61d3      	str	r3, [r2, #28]
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b28:	f000 fdb8 	bl	800269c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	201e      	movs	r0, #30
 8001b32:	f000 fada 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b36:	201e      	movs	r0, #30
 8001b38:	f000 faf3 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40000800 	.word	0x40000800
 8001b54:	40010c00 	.word	0x40010c00

08001b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	d142      	bne.n	8001bfe <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <HAL_TIM_MspPostInit+0xb4>)
 8001bbe:	f000 fd6d 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <HAL_TIM_MspPostInit+0xb8>)
 8001bd6:	f000 fd61 	bl	800269c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_TIM_MspPostInit+0xbc>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_TIM_MspPostInit+0xbc>)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	40010000 	.word	0x40010000

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <HAL_UART_MspInit+0xe8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d15f      	bne.n	8001cf8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c42:	61d3      	str	r3, [r2, #28]
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4822      	ldr	r0, [pc, #136]	; (8001d08 <HAL_UART_MspInit+0xf0>)
 8001c7e:	f000 fd0d 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	481c      	ldr	r0, [pc, #112]	; (8001d08 <HAL_UART_MspInit+0xf0>)
 8001c98:	f000 fd00 	bl	800269c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_UART_MspInit+0xf8>)
 8001ca0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001cce:	f000 fa43 	bl	8002158 <HAL_DMA_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001cd8:	f7ff fa78 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2027      	movs	r0, #39	; 0x27
 8001cee:	f000 f9fc 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cf2:	2027      	movs	r0, #39	; 0x27
 8001cf4:	f000 fa15 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40004800 	.word	0x40004800
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	2000019c 	.word	0x2000019c
 8001d10:	40020030 	.word	0x40020030

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f000 f8d3 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <DMA1_Channel3_IRQHandler+0x10>)
 8001d6a:	f000 fb63 	bl	8002434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000019c 	.word	0x2000019c

08001d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM3_IRQHandler+0x10>)
 8001d7e:	f001 fc5b 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000c4 	.word	0x200000c4

08001d8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM4_IRQHandler+0x10>)
 8001d92:	f001 fc51 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000010c 	.word	0x2000010c

08001da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <USART3_IRQHandler+0x10>)
 8001da6:	f002 f9b5 	bl	8004114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000154 	.word	0x20000154

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f003 f8cc 	bl	8004f80 <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20005000 	.word	0x20005000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	20000300 	.word	0x20000300
 8001e1c:	20000450 	.word	0x20000450

08001e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff fff8 	bl	8001e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e32:	490c      	ldr	r1, [pc, #48]	; (8001e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e48:	4c09      	ldr	r4, [pc, #36]	; (8001e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f003 f899 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7fe fe71 	bl	8000b40 <main>
  bx lr
 8001e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e68:	0800596c 	.word	0x0800596c
  ldr r2, =_sbss
 8001e6c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e70:	20000450 	.word	0x20000450

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_Init+0x28>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_Init+0x28>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f923 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f000 f808 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fd96 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f93b 	bl	800213e <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f903 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x1c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x20>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_IncTick+0x20>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000304 	.word	0x20000304

08001f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <HAL_GetTick+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000304 	.word	0x20000304

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <__NVIC_EnableIRQ+0x34>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	; (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	; (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff90 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff2d 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff42 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff90 	bl	800202c <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5f 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff35 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e043      	b.n	80021f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_DMA_Init+0xa8>)
 8002176:	4413      	add	r3, r2
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_DMA_Init+0xac>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	009a      	lsls	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_DMA_Init+0xb0>)
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	bffdfff8 	.word	0xbffdfff8
 8002204:	cccccccd 	.word	0xcccccccd
 8002208:	40020000 	.word	0x40020000

0800220c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_DMA_Start_IT+0x20>
 8002228:	2302      	movs	r3, #2
 800222a:	e04b      	b.n	80022c4 <HAL_DMA_Start_IT+0xb8>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d13a      	bne.n	80022b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f9eb 	bl	8002640 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 020e 	orr.w	r2, r2, #14
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e00f      	b.n	80022a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 020a 	orr.w	r2, r2, #10
 80022a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e005      	b.n	80022c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d008      	beq.n	80022f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e020      	b.n	8002338 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 020e 	bic.w	r2, r2, #14
 8002304:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d005      	beq.n	8002368 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2204      	movs	r2, #4
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e051      	b.n	800240c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 020e 	bic.w	r2, r2, #14
 8002376:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Abort_IT+0xd4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d029      	beq.n	80023e6 <HAL_DMA_Abort_IT+0xa2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_DMA_Abort_IT+0xd8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d022      	beq.n	80023e2 <HAL_DMA_Abort_IT+0x9e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_DMA_Abort_IT+0xdc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01a      	beq.n	80023dc <HAL_DMA_Abort_IT+0x98>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_DMA_Abort_IT+0xe0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d012      	beq.n	80023d6 <HAL_DMA_Abort_IT+0x92>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_DMA_Abort_IT+0xe4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00a      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x8c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_DMA_Abort_IT+0xe8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d102      	bne.n	80023ca <HAL_DMA_Abort_IT+0x86>
 80023c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023c8:	e00e      	b.n	80023e8 <HAL_DMA_Abort_IT+0xa4>
 80023ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ce:	e00b      	b.n	80023e8 <HAL_DMA_Abort_IT+0xa4>
 80023d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d4:	e008      	b.n	80023e8 <HAL_DMA_Abort_IT+0xa4>
 80023d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023da:	e005      	b.n	80023e8 <HAL_DMA_Abort_IT+0xa4>
 80023dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e0:	e002      	b.n	80023e8 <HAL_DMA_Abort_IT+0xa4>
 80023e2:	2310      	movs	r3, #16
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_Abort_IT+0xa4>
 80023e6:	2301      	movs	r3, #1
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_DMA_Abort_IT+0xec>)
 80023ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
    } 
  }
  return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020008 	.word	0x40020008
 800241c:	4002001c 	.word	0x4002001c
 8002420:	40020030 	.word	0x40020030
 8002424:	40020044 	.word	0x40020044
 8002428:	40020058 	.word	0x40020058
 800242c:	4002006c 	.word	0x4002006c
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2204      	movs	r2, #4
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d04f      	beq.n	80024fc <HAL_DMA_IRQHandler+0xc8>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d04a      	beq.n	80024fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d107      	bne.n	8002484 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a66      	ldr	r2, [pc, #408]	; (8002624 <HAL_DMA_IRQHandler+0x1f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d029      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xae>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a65      	ldr	r2, [pc, #404]	; (8002628 <HAL_DMA_IRQHandler+0x1f4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <HAL_DMA_IRQHandler+0xaa>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_DMA_IRQHandler+0x1f8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01a      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xa4>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a62      	ldr	r2, [pc, #392]	; (8002630 <HAL_DMA_IRQHandler+0x1fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x9e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a60      	ldr	r2, [pc, #384]	; (8002634 <HAL_DMA_IRQHandler+0x200>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00a      	beq.n	80024cc <HAL_DMA_IRQHandler+0x98>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a5f      	ldr	r2, [pc, #380]	; (8002638 <HAL_DMA_IRQHandler+0x204>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d102      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x92>
 80024c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024c4:	e00e      	b.n	80024e4 <HAL_DMA_IRQHandler+0xb0>
 80024c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024ca:	e00b      	b.n	80024e4 <HAL_DMA_IRQHandler+0xb0>
 80024cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024d0:	e008      	b.n	80024e4 <HAL_DMA_IRQHandler+0xb0>
 80024d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024d6:	e005      	b.n	80024e4 <HAL_DMA_IRQHandler+0xb0>
 80024d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024dc:	e002      	b.n	80024e4 <HAL_DMA_IRQHandler+0xb0>
 80024de:	2340      	movs	r3, #64	; 0x40
 80024e0:	e000      	b.n	80024e4 <HAL_DMA_IRQHandler+0xb0>
 80024e2:	2304      	movs	r3, #4
 80024e4:	4a55      	ldr	r2, [pc, #340]	; (800263c <HAL_DMA_IRQHandler+0x208>)
 80024e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8094 	beq.w	800261a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024fa:	e08e      	b.n	800261a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2202      	movs	r2, #2
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d056      	beq.n	80025ba <HAL_DMA_IRQHandler+0x186>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d051      	beq.n	80025ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 020a 	bic.w	r2, r2, #10
 8002532:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a38      	ldr	r2, [pc, #224]	; (8002624 <HAL_DMA_IRQHandler+0x1f0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d029      	beq.n	800259a <HAL_DMA_IRQHandler+0x166>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a37      	ldr	r2, [pc, #220]	; (8002628 <HAL_DMA_IRQHandler+0x1f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <HAL_DMA_IRQHandler+0x162>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a35      	ldr	r2, [pc, #212]	; (800262c <HAL_DMA_IRQHandler+0x1f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0x15c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_DMA_IRQHandler+0x1fc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d012      	beq.n	800258a <HAL_DMA_IRQHandler+0x156>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_DMA_IRQHandler+0x200>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x150>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a31      	ldr	r2, [pc, #196]	; (8002638 <HAL_DMA_IRQHandler+0x204>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d102      	bne.n	800257e <HAL_DMA_IRQHandler+0x14a>
 8002578:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800257c:	e00e      	b.n	800259c <HAL_DMA_IRQHandler+0x168>
 800257e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002582:	e00b      	b.n	800259c <HAL_DMA_IRQHandler+0x168>
 8002584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002588:	e008      	b.n	800259c <HAL_DMA_IRQHandler+0x168>
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	e005      	b.n	800259c <HAL_DMA_IRQHandler+0x168>
 8002590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002594:	e002      	b.n	800259c <HAL_DMA_IRQHandler+0x168>
 8002596:	2320      	movs	r3, #32
 8002598:	e000      	b.n	800259c <HAL_DMA_IRQHandler+0x168>
 800259a:	2302      	movs	r3, #2
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <HAL_DMA_IRQHandler+0x208>)
 800259e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d034      	beq.n	800261a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025b8:	e02f      	b.n	800261a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2208      	movs	r2, #8
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <HAL_DMA_IRQHandler+0x1e8>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d023      	beq.n	800261c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 020e 	bic.w	r2, r2, #14
 80025e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
    }
  }
  return;
 800261a:	bf00      	nop
 800261c:	bf00      	nop
}
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020008 	.word	0x40020008
 8002628:	4002001c 	.word	0x4002001c
 800262c:	40020030 	.word	0x40020030
 8002630:	40020044 	.word	0x40020044
 8002634:	40020058 	.word	0x40020058
 8002638:	4002006c 	.word	0x4002006c
 800263c:	40020000 	.word	0x40020000

08002640 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b10      	cmp	r3, #16
 800266c:	d108      	bne.n	8002680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800267e:	e007      	b.n	8002690 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b08b      	sub	sp, #44	; 0x2c
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	e169      	b.n	8002984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026b0:	2201      	movs	r2, #1
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 8158 	bne.w	800297e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a9a      	ldr	r2, [pc, #616]	; (800293c <HAL_GPIO_Init+0x2a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d05e      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026d8:	4a98      	ldr	r2, [pc, #608]	; (800293c <HAL_GPIO_Init+0x2a0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d875      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 80026de:	4a98      	ldr	r2, [pc, #608]	; (8002940 <HAL_GPIO_Init+0x2a4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d058      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026e4:	4a96      	ldr	r2, [pc, #600]	; (8002940 <HAL_GPIO_Init+0x2a4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d86f      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 80026ea:	4a96      	ldr	r2, [pc, #600]	; (8002944 <HAL_GPIO_Init+0x2a8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d052      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026f0:	4a94      	ldr	r2, [pc, #592]	; (8002944 <HAL_GPIO_Init+0x2a8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d869      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 80026f6:	4a94      	ldr	r2, [pc, #592]	; (8002948 <HAL_GPIO_Init+0x2ac>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04c      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026fc:	4a92      	ldr	r2, [pc, #584]	; (8002948 <HAL_GPIO_Init+0x2ac>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d863      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 8002702:	4a92      	ldr	r2, [pc, #584]	; (800294c <HAL_GPIO_Init+0x2b0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d046      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 8002708:	4a90      	ldr	r2, [pc, #576]	; (800294c <HAL_GPIO_Init+0x2b0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d85d      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 800270e:	2b12      	cmp	r3, #18
 8002710:	d82a      	bhi.n	8002768 <HAL_GPIO_Init+0xcc>
 8002712:	2b12      	cmp	r3, #18
 8002714:	d859      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_GPIO_Init+0x80>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	08002797 	.word	0x08002797
 8002720:	08002771 	.word	0x08002771
 8002724:	08002783 	.word	0x08002783
 8002728:	080027c5 	.word	0x080027c5
 800272c:	080027cb 	.word	0x080027cb
 8002730:	080027cb 	.word	0x080027cb
 8002734:	080027cb 	.word	0x080027cb
 8002738:	080027cb 	.word	0x080027cb
 800273c:	080027cb 	.word	0x080027cb
 8002740:	080027cb 	.word	0x080027cb
 8002744:	080027cb 	.word	0x080027cb
 8002748:	080027cb 	.word	0x080027cb
 800274c:	080027cb 	.word	0x080027cb
 8002750:	080027cb 	.word	0x080027cb
 8002754:	080027cb 	.word	0x080027cb
 8002758:	080027cb 	.word	0x080027cb
 800275c:	080027cb 	.word	0x080027cb
 8002760:	08002779 	.word	0x08002779
 8002764:	0800278d 	.word	0x0800278d
 8002768:	4a79      	ldr	r2, [pc, #484]	; (8002950 <HAL_GPIO_Init+0x2b4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800276e:	e02c      	b.n	80027ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e029      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e024      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	3308      	adds	r3, #8
 8002788:	623b      	str	r3, [r7, #32]
          break;
 800278a:	e01f      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	330c      	adds	r3, #12
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e01a      	b.n	80027cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800279e:	2304      	movs	r3, #4
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e013      	b.n	80027cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	611a      	str	r2, [r3, #16]
          break;
 80027b6:	e009      	b.n	80027cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b8:	2308      	movs	r3, #8
 80027ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	615a      	str	r2, [r3, #20]
          break;
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x130>
          break;
 80027ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2bff      	cmp	r3, #255	; 0xff
 80027d0:	d801      	bhi.n	80027d6 <HAL_GPIO_Init+0x13a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	e001      	b.n	80027da <HAL_GPIO_Init+0x13e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2bff      	cmp	r3, #255	; 0xff
 80027e0:	d802      	bhi.n	80027e8 <HAL_GPIO_Init+0x14c>
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x152>
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	3b08      	subs	r3, #8
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	210f      	movs	r1, #15
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	401a      	ands	r2, r3
 8002800:	6a39      	ldr	r1, [r7, #32]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80b1 	beq.w	800297e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800281c:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_GPIO_Init+0x2b8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <HAL_GPIO_Init+0x2b8>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_GPIO_Init+0x2b8>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002834:	4a48      	ldr	r2, [pc, #288]	; (8002958 <HAL_GPIO_Init+0x2bc>)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a40      	ldr	r2, [pc, #256]	; (800295c <HAL_GPIO_Init+0x2c0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d013      	beq.n	8002888 <HAL_GPIO_Init+0x1ec>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_GPIO_Init+0x2c4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00d      	beq.n	8002884 <HAL_GPIO_Init+0x1e8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3e      	ldr	r2, [pc, #248]	; (8002964 <HAL_GPIO_Init+0x2c8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <HAL_GPIO_Init+0x1e4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a3d      	ldr	r2, [pc, #244]	; (8002968 <HAL_GPIO_Init+0x2cc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_GPIO_Init+0x1e0>
 8002878:	2303      	movs	r3, #3
 800287a:	e006      	b.n	800288a <HAL_GPIO_Init+0x1ee>
 800287c:	2304      	movs	r3, #4
 800287e:	e004      	b.n	800288a <HAL_GPIO_Init+0x1ee>
 8002880:	2302      	movs	r3, #2
 8002882:	e002      	b.n	800288a <HAL_GPIO_Init+0x1ee>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_GPIO_Init+0x1ee>
 8002888:	2300      	movs	r3, #0
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	f002 0203 	and.w	r2, r2, #3
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	4093      	lsls	r3, r2
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800289a:	492f      	ldr	r1, [pc, #188]	; (8002958 <HAL_GPIO_Init+0x2bc>)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	492c      	ldr	r1, [pc, #176]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028c2:	4b2a      	ldr	r3, [pc, #168]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4928      	ldr	r1, [pc, #160]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	4922      	ldr	r1, [pc, #136]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	491e      	ldr	r1, [pc, #120]	; (800296c <HAL_GPIO_Init+0x2d0>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_GPIO_Init+0x2d0>)
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4918      	ldr	r1, [pc, #96]	; (800296c <HAL_GPIO_Init+0x2d0>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_GPIO_Init+0x2d0>)
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	43db      	mvns	r3, r3
 800291a:	4914      	ldr	r1, [pc, #80]	; (800296c <HAL_GPIO_Init+0x2d0>)
 800291c:	4013      	ands	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d021      	beq.n	8002970 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_GPIO_Init+0x2d0>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_GPIO_Init+0x2d0>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e021      	b.n	800297e <HAL_GPIO_Init+0x2e2>
 800293a:	bf00      	nop
 800293c:	10320000 	.word	0x10320000
 8002940:	10310000 	.word	0x10310000
 8002944:	10220000 	.word	0x10220000
 8002948:	10210000 	.word	0x10210000
 800294c:	10120000 	.word	0x10120000
 8002950:	10110000 	.word	0x10110000
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000
 800295c:	40010800 	.word	0x40010800
 8002960:	40010c00 	.word	0x40010c00
 8002964:	40011000 	.word	0x40011000
 8002968:	40011400 	.word	0x40011400
 800296c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_GPIO_Init+0x304>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	43db      	mvns	r3, r3
 8002978:	4909      	ldr	r1, [pc, #36]	; (80029a0 <HAL_GPIO_Init+0x304>)
 800297a:	4013      	ands	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	3301      	adds	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	f47f ae8e 	bne.w	80026b0 <HAL_GPIO_Init+0x14>
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	372c      	adds	r7, #44	; 0x2c
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029c0:	e003      	b.n	80029ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	041a      	lsls	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e272      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f4:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d00c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d112      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5e>
 8002a0c:	4b8c      	ldr	r3, [pc, #560]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x12c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d168      	bne.n	8002b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e24c      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x76>
 8002a3c:	4b80      	ldr	r3, [pc, #512]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7f      	ldr	r2, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x98>
 8002a52:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a77      	ldr	r2, [pc, #476]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0xbc>
 8002a76:	4b72      	ldr	r3, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a71      	ldr	r2, [pc, #452]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a90:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6a      	ldr	r2, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a67      	ldr	r2, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fa3a 	bl	8001f28 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fa36 	bl	8001f28 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e200      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xe4>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fa26 	bl	8001f28 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fa22 	bl	8001f28 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1ec      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x10c>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0e:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x18c>
 8002b26:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x176>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1c0      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4939      	ldr	r1, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7ff f9db 	bl	8001f28 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b76:	f7ff f9d7 	bl	8001f28 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1a1      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4927      	ldr	r1, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f9ba 	bl	8001f28 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f9b6 	bl	8001f28 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e180      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d03a      	beq.n	8002c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d019      	beq.n	8002c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x274>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff f99a 	bl	8001f28 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f996 	bl	8001f28 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e160      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f000 face 	bl	80031b8 <RCC_Delay>
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_OscConfig+0x274>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7ff f980 	bl	8001f28 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2a:	e00f      	b.n	8002c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f97c 	bl	8001f28 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d908      	bls.n	8002c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e146      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	42420000 	.word	0x42420000
 8002c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b92      	ldr	r3, [pc, #584]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e9      	bne.n	8002c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a6 	beq.w	8002db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6a:	4b8b      	ldr	r3, [pc, #556]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4a87      	ldr	r2, [pc, #540]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	61d3      	str	r3, [r2, #28]
 8002c82:	4b85      	ldr	r3, [pc, #532]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b82      	ldr	r3, [pc, #520]	; (8002e9c <HAL_RCC_OscConfig+0x4c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b7f      	ldr	r3, [pc, #508]	; (8002e9c <HAL_RCC_OscConfig+0x4c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7e      	ldr	r2, [pc, #504]	; (8002e9c <HAL_RCC_OscConfig+0x4c8>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7ff f93d 	bl	8001f28 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7ff f939 	bl	8001f28 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e103      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b75      	ldr	r3, [pc, #468]	; (8002e9c <HAL_RCC_OscConfig+0x4c8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x312>
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	e02d      	b.n	8002d42 <HAL_RCC_OscConfig+0x36e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x334>
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a69      	ldr	r2, [pc, #420]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a66      	ldr	r2, [pc, #408]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	e01c      	b.n	8002d42 <HAL_RCC_OscConfig+0x36e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCC_OscConfig+0x356>
 8002d10:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a60      	ldr	r2, [pc, #384]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	4b5e      	ldr	r3, [pc, #376]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a5d      	ldr	r2, [pc, #372]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	e00b      	b.n	8002d42 <HAL_RCC_OscConfig+0x36e>
 8002d2a:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a5a      	ldr	r2, [pc, #360]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a57      	ldr	r2, [pc, #348]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d015      	beq.n	8002d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff f8ed 	bl	8001f28 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7ff f8e9 	bl	8001f28 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0b1      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ee      	beq.n	8002d52 <HAL_RCC_OscConfig+0x37e>
 8002d74:	e014      	b.n	8002da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7ff f8d7 	bl	8001f28 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7ff f8d3 	bl	8001f28 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e09b      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da6:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8087 	beq.w	8002eca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d061      	beq.n	8002e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d146      	bne.n	8002e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7ff f8a7 	bl	8001f28 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7ff f8a3 	bl	8001f28 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e06d      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d108      	bne.n	8002e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4921      	ldr	r1, [pc, #132]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a19      	ldr	r1, [r3, #32]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	491b      	ldr	r1, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7ff f877 	bl	8001f28 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7ff f873 	bl	8001f28 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e03d      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x46a>
 8002e5c:	e035      	b.n	8002eca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_OscConfig+0x4cc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff f860 	bl	8001f28 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff f85c 	bl	8001f28 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e026      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x498>
 8002e8a:	e01e      	b.n	8002eca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e019      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x500>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0d0      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4965      	ldr	r1, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d040      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e073      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06b      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe ffae 	bl	8001f28 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe ffaa 	bl	8001f28 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e053      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d210      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe ff0c 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	08005904 	.word	0x08005904
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x30>
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x36>
 80030da:	e027      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_GetSysClockFreq+0x98>)
 80030de:	613b      	str	r3, [r7, #16]
      break;
 80030e0:	e027      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0c9b      	lsrs	r3, r3, #18
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
 80030ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d010      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_RCC_GetSysClockFreq+0x94>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0c5b      	lsrs	r3, r3, #17
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_RCC_GetSysClockFreq+0x98>)
 800310e:	fb03 f202 	mul.w	r2, r3, r2
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e004      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	613b      	str	r3, [r7, #16]
      break;
 800312a:	e002      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	613b      	str	r3, [r7, #16]
      break;
 8003130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003132:	693b      	ldr	r3, [r7, #16]
}
 8003134:	4618      	mov	r0, r3
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	007a1200 	.word	0x007a1200
 8003148:	0800591c 	.word	0x0800591c
 800314c:	0800592c 	.word	0x0800592c
 8003150:	003d0900 	.word	0x003d0900

08003154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003158:	4b02      	ldr	r3, [pc, #8]	; (8003164 <HAL_RCC_GetHCLKFreq+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000000 	.word	0x20000000

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800316c:	f7ff fff2 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	08005914 	.word	0x08005914

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003194:	f7ff ffde 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0adb      	lsrs	r3, r3, #11
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08005914 	.word	0x08005914

080031b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <RCC_Delay+0x34>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <RCC_Delay+0x38>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0a5b      	lsrs	r3, r3, #9
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d4:	bf00      	nop
  }
  while (Delay --);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1e5a      	subs	r2, r3, #1
 80031da:	60fa      	str	r2, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f9      	bne.n	80031d4 <RCC_Delay+0x1c>
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	20000000 	.word	0x20000000
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e041      	b.n	800328a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fc04 	bl	8001a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fbf8 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_TIM_PWM_Start+0x24>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e022      	b.n	80032fe <HAL_TIM_PWM_Start+0x6a>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d109      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x3e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e015      	b.n	80032fe <HAL_TIM_PWM_Start+0x6a>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d109      	bne.n	80032ec <HAL_TIM_PWM_Start+0x58>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e008      	b.n	80032fe <HAL_TIM_PWM_Start+0x6a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e05e      	b.n	80033c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_TIM_PWM_Start+0x82>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	e013      	b.n	800333e <HAL_TIM_PWM_Start+0xaa>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b04      	cmp	r3, #4
 800331a:	d104      	bne.n	8003326 <HAL_TIM_PWM_Start+0x92>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003324:	e00b      	b.n	800333e <HAL_TIM_PWM_Start+0xaa>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Start+0xa2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	e003      	b.n	800333e <HAL_TIM_PWM_Start+0xaa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2201      	movs	r2, #1
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fd58 	bl	8003dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_TIM_PWM_Start+0x138>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d107      	bne.n	8003366 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIM_PWM_Start+0x138>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIM_PWM_Start+0xfa>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d009      	beq.n	800338e <HAL_TIM_PWM_Start+0xfa>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <HAL_TIM_PWM_Start+0x13c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIM_PWM_Start+0xfa>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_TIM_PWM_Start+0x140>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d111      	bne.n	80033b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b06      	cmp	r3, #6
 800339e:	d010      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	e007      	b.n	80033c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800

080033d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e093      	b.n	8003514 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fe fb2d 	bl	8001a60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341c:	f023 0307 	bic.w	r3, r3, #7
 8003420:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fafb 	bl	8003a28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	4313      	orrs	r3, r2
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003478:	f023 030c 	bic.w	r3, r3, #12
 800347c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	4313      	orrs	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	011a      	lsls	r2, r3, #4
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	031b      	lsls	r3, r3, #12
 80034a8:	4313      	orrs	r3, r2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	4313      	orrs	r3, r2
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800353c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003544:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d110      	bne.n	800356e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e069      	b.n	8003630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	e031      	b.n	80035d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d110      	bne.n	8003596 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800357a:	7b3b      	ldrb	r3, [r7, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e055      	b.n	8003630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003594:	e01d      	b.n	80035d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d108      	bne.n	80035ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a2:	7b7b      	ldrb	r3, [r7, #13]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d102      	bne.n	80035ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80035a8:	7b3b      	ldrb	r3, [r7, #12]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e03e      	b.n	8003630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_TIM_Encoder_Start+0xc4>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d008      	beq.n	80035f0 <HAL_TIM_Encoder_Start+0xd4>
 80035de:	e00f      	b.n	8003600 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fc07 	bl	8003dfc <TIM_CCxChannelCmd>
      break;
 80035ee:	e016      	b.n	800361e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	2104      	movs	r1, #4
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fbff 	bl	8003dfc <TIM_CCxChannelCmd>
      break;
 80035fe:	e00e      	b.n	800361e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2201      	movs	r2, #1
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fbf7 	bl	8003dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	2104      	movs	r1, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fbf0 	bl	8003dfc <TIM_CCxChannelCmd>
      break;
 800361c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9b8 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9ab 	bl	80039de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9ba 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0204 	mvn.w	r2, #4
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f98e 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f981 	bl	80039de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f990 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0208 	mvn.w	r2, #8
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f964 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f957 	bl	80039de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f966 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0210 	mvn.w	r2, #16
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2208      	movs	r2, #8
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f93a 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f92d 	bl	80039de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f93c 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0201 	mvn.w	r2, #1
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f908 	bl	80039cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fb95 	bl	8003f12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f900 	bl	8003a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b20      	cmp	r3, #32
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0220 	mvn.w	r2, #32
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb60 	bl	8003f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003862:	2302      	movs	r3, #2
 8003864:	e0ae      	b.n	80039c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	f200 809f 	bhi.w	80039b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080039b5 	.word	0x080039b5
 8003884:	080039b5 	.word	0x080039b5
 8003888:	080039b5 	.word	0x080039b5
 800388c:	080038f1 	.word	0x080038f1
 8003890:	080039b5 	.word	0x080039b5
 8003894:	080039b5 	.word	0x080039b5
 8003898:	080039b5 	.word	0x080039b5
 800389c:	08003933 	.word	0x08003933
 80038a0:	080039b5 	.word	0x080039b5
 80038a4:	080039b5 	.word	0x080039b5
 80038a8:	080039b5 	.word	0x080039b5
 80038ac:	08003973 	.word	0x08003973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f918 	bl	8003aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	619a      	str	r2, [r3, #24]
      break;
 80038ee:	e064      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f95e 	bl	8003bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6999      	ldr	r1, [r3, #24]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	619a      	str	r2, [r3, #24]
      break;
 8003930:	e043      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f9a7 	bl	8003c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0208 	orr.w	r2, r2, #8
 800394c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0204 	bic.w	r2, r2, #4
 800395c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69d9      	ldr	r1, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      break;
 8003970:	e023      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f9f1 	bl	8003d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	021a      	lsls	r2, r3, #8
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	61da      	str	r2, [r3, #28]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
      break;
 80039b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
	...

08003a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <TIM_Base_SetConfig+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0x30>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0x30>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <TIM_Base_SetConfig+0xbc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0x30>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <TIM_Base_SetConfig+0xc0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d108      	bne.n	8003a6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <TIM_Base_SetConfig+0xb8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <TIM_Base_SetConfig+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d007      	beq.n	8003a8a <TIM_Base_SetConfig+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <TIM_Base_SetConfig+0xbc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_Base_SetConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <TIM_Base_SetConfig+0xc0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <TIM_Base_SetConfig+0xb8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800

08003aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0201 	bic.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 0302 	bic.w	r3, r3, #2
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <TIM_OC1_SetConfig+0xc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10c      	bne.n	8003b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0308 	bic.w	r3, r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <TIM_OC1_SetConfig+0xc8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d111      	bne.n	8003b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00

08003bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0210 	bic.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0320 	bic.w	r3, r3, #32
 8003c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <TIM_OC2_SetConfig+0xd0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10d      	bne.n	8003c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <TIM_OC2_SetConfig+0xd0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d113      	bne.n	8003c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	40012c00 	.word	0x40012c00

08003c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <TIM_OC3_SetConfig+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10d      	bne.n	8003d06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <TIM_OC3_SetConfig+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00

08003d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <TIM_OC4_SetConfig+0x98>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d109      	bne.n	8003dd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00

08003dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e046      	b.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d009      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a10      	ldr	r2, [pc, #64]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800

08003f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e042      	b.n	8003fbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd fe64 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 ff53 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d16d      	bne.n	80040c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_UART_Transmit+0x2c>
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e066      	b.n	80040c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd ff91 	bl	8001f28 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Transmit+0x6c>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004038:	e02a      	b.n	8004090 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fc1b 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e036      	b.n	80040c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	3302      	adds	r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e007      	b.n	8004082 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3301      	adds	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1cf      	bne.n	800403a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	2140      	movs	r1, #64	; 0x40
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fbeb 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d112      	bne.n	800410a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_Receive_DMA+0x26>
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e00b      	b.n	800410c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	461a      	mov	r2, r3
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fc2b 	bl	800495c <UART_Start_Receive_DMA>
 8004106:	4603      	mov	r3, r0
 8004108:	e000      	b.n	800410c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0ba      	sub	sp, #232	; 0xe8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_UART_IRQHandler+0x66>
 8004166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd90 	bl	8004c98 <UART_Receive_IT>
      return;
 8004178:	e25b      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800417a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80de 	beq.w	8004340 <HAL_UART_IRQHandler+0x22c>
 8004184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004194:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80d1 	beq.w	8004340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_UART_IRQHandler+0xae>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f043 0201 	orr.w	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_UART_IRQHandler+0xd2>
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f043 0202 	orr.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_UART_IRQHandler+0xf6>
 80041f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d011      	beq.n	800423a <HAL_UART_IRQHandler+0x126>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f043 0208 	orr.w	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 81f2 	beq.w	8004628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_UART_IRQHandler+0x14e>
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fd1b 	bl	8004c98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <HAL_UART_IRQHandler+0x17a>
 8004286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04f      	beq.n	800432e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fc25 	bl	8004ade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d041      	beq.n	8004326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1d9      	bne.n	80042a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d013      	beq.n	800431e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	4a7e      	ldr	r2, [pc, #504]	; (80044f4 <HAL_UART_IRQHandler+0x3e0>)
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe f81e 	bl	8002344 <HAL_DMA_Abort_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004318:	4610      	mov	r0, r2
 800431a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e00e      	b.n	800433c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f99c 	bl	800465c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	e00a      	b.n	800433c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f998 	bl	800465c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	e006      	b.n	800433c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f994 	bl	800465c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800433a:	e175      	b.n	8004628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	bf00      	nop
    return;
 800433e:	e173      	b.n	8004628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	2b01      	cmp	r3, #1
 8004346:	f040 814f 	bne.w	80045e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8148 	beq.w	80045e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8141 	beq.w	80045e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80b6 	beq.w	80044f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8145 	beq.w	800462c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043aa:	429a      	cmp	r2, r3
 80043ac:	f080 813e 	bcs.w	800462c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b20      	cmp	r3, #32
 80043c0:	f000 8088 	beq.w	80044d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1d9      	bne.n	80043c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004434:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004438:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800443c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e1      	bne.n	8004410 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800445c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004470:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004472:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004476:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800447e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e3      	bne.n	800444c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a4:	f023 0310 	bic.w	r3, r3, #16
 80044a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80044b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e3      	bne.n	8004492 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd fefc 	bl	80022cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8bf 	bl	800466e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044f0:	e09c      	b.n	800462c <HAL_UART_IRQHandler+0x518>
 80044f2:	bf00      	nop
 80044f4:	08004ba3 	.word	0x08004ba3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004500:	b29b      	uxth	r3, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 808e 	beq.w	8004630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8089 	beq.w	8004630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004542:	647a      	str	r2, [r7, #68]	; 0x44
 8004544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e3      	bne.n	800451e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	623b      	str	r3, [r7, #32]
   return(result);
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800457a:	633a      	str	r2, [r7, #48]	; 0x30
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e3      	bne.n	8004556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045c0:	61fa      	str	r2, [r7, #28]
 80045c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	617b      	str	r3, [r7, #20]
   return(result);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e3      	bne.n	800459c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f844 	bl	800466e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045e6:	e023      	b.n	8004630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <HAL_UART_IRQHandler+0x4f4>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fae2 	bl	8004bca <UART_Transmit_IT>
    return;
 8004606:	e014      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <HAL_UART_IRQHandler+0x51e>
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fb21 	bl	8004c68 <UART_EndTransmit_IT>
    return;
 8004626:	e004      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
    return;
 8004628:	bf00      	nop
 800462a:	e002      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
      return;
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <HAL_UART_IRQHandler+0x51e>
      return;
 8004630:	bf00      	nop
  }
}
 8004632:	37e8      	adds	r7, #232	; 0xe8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b09c      	sub	sp, #112	; 0x70
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d172      	bne.n	8004786 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	2200      	movs	r2, #0
 80046a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80046c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	667b      	str	r3, [r7, #100]	; 0x64
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046fa:	647a      	str	r2, [r7, #68]	; 0x44
 80046fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3314      	adds	r3, #20
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	623b      	str	r3, [r7, #32]
   return(result);
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	663b      	str	r3, [r7, #96]	; 0x60
 8004726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800472e:	633a      	str	r2, [r7, #48]	; 0x30
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d119      	bne.n	8004786 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	60fb      	str	r3, [r7, #12]
   return(result);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004772:	61fa      	str	r2, [r7, #28]
 8004774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	69b9      	ldr	r1, [r7, #24]
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	617b      	str	r3, [r7, #20]
   return(result);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004788:	2200      	movs	r2, #0
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	2b01      	cmp	r3, #1
 8004792:	d106      	bne.n	80047a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004798:	4619      	mov	r1, r3
 800479a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800479c:	f7ff ff67 	bl	800466e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a0:	e002      	b.n	80047a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80047a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047a4:	f7fc f94a 	bl	8000a3c <HAL_UART_RxCpltCallback>
}
 80047a8:	bf00      	nop
 80047aa:	3770      	adds	r7, #112	; 0x70
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d108      	bne.n	80047de <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4619      	mov	r1, r3
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff ff49 	bl	800466e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047dc:	e002      	b.n	80047e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff33 	bl	800464a <HAL_UART_RxHalfCpltCallback>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b21      	cmp	r3, #33	; 0x21
 800481e:	d108      	bne.n	8004832 <UART_DMAError+0x46>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800482c:	68b8      	ldr	r0, [r7, #8]
 800482e:	f000 f92f 	bl	8004a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b22      	cmp	r3, #34	; 0x22
 8004852:	d108      	bne.n	8004866 <UART_DMAError+0x7a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004860:	68b8      	ldr	r0, [r7, #8]
 8004862:	f000 f93c 	bl	8004ade <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004872:	68b8      	ldr	r0, [r7, #8]
 8004874:	f7ff fef2 	bl	800465c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b090      	sub	sp, #64	; 0x40
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	e050      	b.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d04c      	beq.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048a0:	f7fd fb42 	bl	8001f28 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d241      	bcs.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048d0:	637a      	str	r2, [r7, #52]	; 0x34
 80048d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	613b      	str	r3, [r7, #16]
   return(result);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004904:	623a      	str	r2, [r7, #32]
 8004906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	69f9      	ldr	r1, [r7, #28]
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	61bb      	str	r3, [r7, #24]
   return(result);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e00f      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	429a      	cmp	r2, r3
 8004950:	d09f      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3740      	adds	r7, #64	; 0x40
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b098      	sub	sp, #96	; 0x60
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2222      	movs	r2, #34	; 0x22
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	4a3e      	ldr	r2, [pc, #248]	; (8004a84 <UART_Start_Receive_DMA+0x128>)
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	4a3d      	ldr	r2, [pc, #244]	; (8004a88 <UART_Start_Receive_DMA+0x12c>)
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <UART_Start_Receive_DMA+0x130>)
 800499a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	2200      	movs	r2, #0
 80049a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049a4:	f107 0308 	add.w	r3, r7, #8
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	f7fd fc26 	bl	800220c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d019      	beq.n	8004a12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	657b      	str	r3, [r7, #84]	; 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a32:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	617b      	str	r3, [r7, #20]
   return(result);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a66:	627a      	str	r2, [r7, #36]	; 0x24
 8004a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6a39      	ldr	r1, [r7, #32]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3760      	adds	r7, #96	; 0x60
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	08004685 	.word	0x08004685
 8004a88:	080047b1 	.word	0x080047b1
 8004a8c:	080047ed 	.word	0x080047ed

08004a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	61ba      	str	r2, [r7, #24]
 8004aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004ad4:	bf00      	nop
 8004ad6:	3724      	adds	r7, #36	; 0x24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b095      	sub	sp, #84	; 0x54
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b06:	643a      	str	r2, [r7, #64]	; 0x40
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d119      	bne.n	8004b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b76:	61ba      	str	r2, [r7, #24]
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	613b      	str	r3, [r7, #16]
   return(result);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b98:	bf00      	nop
 8004b9a:	3754      	adds	r7, #84	; 0x54
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fd4d 	bl	800465c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b21      	cmp	r3, #33	; 0x21
 8004bdc:	d13e      	bne.n	8004c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d114      	bne.n	8004c12 <UART_Transmit_IT+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d110      	bne.n	8004c12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	621a      	str	r2, [r3, #32]
 8004c10:	e008      	b.n	8004c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6211      	str	r1, [r2, #32]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4619      	mov	r1, r3
 8004c32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fcd5 	bl	8004638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	; 0x30
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b22      	cmp	r3, #34	; 0x22
 8004caa:	f040 80ae 	bne.w	8004e0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	d117      	bne.n	8004ce8 <UART_Receive_IT+0x50>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ce6:	e026      	b.n	8004d36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	d007      	beq.n	8004d0c <UART_Receive_IT+0x74>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <UART_Receive_IT+0x82>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e008      	b.n	8004d2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d15d      	bne.n	8004e06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0220 	bic.w	r2, r2, #32
 8004d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d135      	bne.n	8004dfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	613b      	str	r3, [r7, #16]
   return(result);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	623a      	str	r2, [r7, #32]
 8004db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	69f9      	ldr	r1, [r7, #28]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d10a      	bne.n	8004dee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fc3a 	bl	800466e <HAL_UARTEx_RxEventCallback>
 8004dfa:	e002      	b.n	8004e02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fb fe1d 	bl	8000a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e002      	b.n	8004e0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3730      	adds	r7, #48	; 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <UART_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7fe f988 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe f970 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	0119      	lsls	r1, r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	; 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee0:	4419      	add	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	; 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	; 0x32
 8004f0c:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <siprintf>:
 8004f30:	b40e      	push	{r1, r2, r3}
 8004f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f36:	b500      	push	{lr}
 8004f38:	b09c      	sub	sp, #112	; 0x70
 8004f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f3c:	9002      	str	r0, [sp, #8]
 8004f3e:	9006      	str	r0, [sp, #24]
 8004f40:	9107      	str	r1, [sp, #28]
 8004f42:	9104      	str	r1, [sp, #16]
 8004f44:	4808      	ldr	r0, [pc, #32]	; (8004f68 <siprintf+0x38>)
 8004f46:	4909      	ldr	r1, [pc, #36]	; (8004f6c <siprintf+0x3c>)
 8004f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4c:	9105      	str	r1, [sp, #20]
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	a902      	add	r1, sp, #8
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	f000 f98e 	bl	8005274 <_svfiprintf_r>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	b01c      	add	sp, #112	; 0x70
 8004f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f64:	b003      	add	sp, #12
 8004f66:	4770      	bx	lr
 8004f68:	20000058 	.word	0x20000058
 8004f6c:	ffff0208 	.word	0xffff0208

08004f70 <memset>:
 8004f70:	4603      	mov	r3, r0
 8004f72:	4402      	add	r2, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d100      	bne.n	8004f7a <memset+0xa>
 8004f78:	4770      	bx	lr
 8004f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7e:	e7f9      	b.n	8004f74 <memset+0x4>

08004f80 <__errno>:
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <__errno+0x8>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000058 	.word	0x20000058

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4d0c      	ldr	r5, [pc, #48]	; (8004fc4 <__libc_init_array+0x38>)
 8004f92:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	f000 fc7a 	bl	8005894 <_init>
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4d0a      	ldr	r5, [pc, #40]	; (8004fcc <__libc_init_array+0x40>)
 8004fa4:	4c0a      	ldr	r4, [pc, #40]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	08005964 	.word	0x08005964
 8004fc8:	08005964 	.word	0x08005964
 8004fcc:	08005964 	.word	0x08005964
 8004fd0:	08005968 	.word	0x08005968

08004fd4 <__retarget_lock_acquire_recursive>:
 8004fd4:	4770      	bx	lr

08004fd6 <__retarget_lock_release_recursive>:
 8004fd6:	4770      	bx	lr

08004fd8 <_free_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4605      	mov	r5, r0
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d040      	beq.n	8005062 <_free_r+0x8a>
 8004fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe4:	1f0c      	subs	r4, r1, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfb8      	it	lt
 8004fea:	18e4      	addlt	r4, r4, r3
 8004fec:	f000 f8dc 	bl	80051a8 <__malloc_lock>
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <_free_r+0x8c>)
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	b933      	cbnz	r3, 8005004 <_free_r+0x2c>
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	6014      	str	r4, [r2, #0]
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005000:	f000 b8d8 	b.w	80051b4 <__malloc_unlock>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d908      	bls.n	800501a <_free_r+0x42>
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	1821      	adds	r1, r4, r0
 800500c:	428b      	cmp	r3, r1
 800500e:	bf01      	itttt	eq
 8005010:	6819      	ldreq	r1, [r3, #0]
 8005012:	685b      	ldreq	r3, [r3, #4]
 8005014:	1809      	addeq	r1, r1, r0
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	e7ed      	b.n	8004ff6 <_free_r+0x1e>
 800501a:	461a      	mov	r2, r3
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b10b      	cbz	r3, 8005024 <_free_r+0x4c>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d9fa      	bls.n	800501a <_free_r+0x42>
 8005024:	6811      	ldr	r1, [r2, #0]
 8005026:	1850      	adds	r0, r2, r1
 8005028:	42a0      	cmp	r0, r4
 800502a:	d10b      	bne.n	8005044 <_free_r+0x6c>
 800502c:	6820      	ldr	r0, [r4, #0]
 800502e:	4401      	add	r1, r0
 8005030:	1850      	adds	r0, r2, r1
 8005032:	4283      	cmp	r3, r0
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	d1e0      	bne.n	8004ffa <_free_r+0x22>
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4408      	add	r0, r1
 800503e:	6010      	str	r0, [r2, #0]
 8005040:	6053      	str	r3, [r2, #4]
 8005042:	e7da      	b.n	8004ffa <_free_r+0x22>
 8005044:	d902      	bls.n	800504c <_free_r+0x74>
 8005046:	230c      	movs	r3, #12
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	e7d6      	b.n	8004ffa <_free_r+0x22>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	1821      	adds	r1, r4, r0
 8005050:	428b      	cmp	r3, r1
 8005052:	bf01      	itttt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	1809      	addeq	r1, r1, r0
 800505a:	6021      	streq	r1, [r4, #0]
 800505c:	6063      	str	r3, [r4, #4]
 800505e:	6054      	str	r4, [r2, #4]
 8005060:	e7cb      	b.n	8004ffa <_free_r+0x22>
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000448 	.word	0x20000448

08005068 <sbrk_aligned>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4e0e      	ldr	r6, [pc, #56]	; (80050a4 <sbrk_aligned+0x3c>)
 800506c:	460c      	mov	r4, r1
 800506e:	6831      	ldr	r1, [r6, #0]
 8005070:	4605      	mov	r5, r0
 8005072:	b911      	cbnz	r1, 800507a <sbrk_aligned+0x12>
 8005074:	f000 fbaa 	bl	80057cc <_sbrk_r>
 8005078:	6030      	str	r0, [r6, #0]
 800507a:	4621      	mov	r1, r4
 800507c:	4628      	mov	r0, r5
 800507e:	f000 fba5 	bl	80057cc <_sbrk_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d00a      	beq.n	800509c <sbrk_aligned+0x34>
 8005086:	1cc4      	adds	r4, r0, #3
 8005088:	f024 0403 	bic.w	r4, r4, #3
 800508c:	42a0      	cmp	r0, r4
 800508e:	d007      	beq.n	80050a0 <sbrk_aligned+0x38>
 8005090:	1a21      	subs	r1, r4, r0
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fb9a 	bl	80057cc <_sbrk_r>
 8005098:	3001      	adds	r0, #1
 800509a:	d101      	bne.n	80050a0 <sbrk_aligned+0x38>
 800509c:	f04f 34ff 	mov.w	r4, #4294967295
 80050a0:	4620      	mov	r0, r4
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	2000044c 	.word	0x2000044c

080050a8 <_malloc_r>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	1ccd      	adds	r5, r1, #3
 80050ae:	f025 0503 	bic.w	r5, r5, #3
 80050b2:	3508      	adds	r5, #8
 80050b4:	2d0c      	cmp	r5, #12
 80050b6:	bf38      	it	cc
 80050b8:	250c      	movcc	r5, #12
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	4607      	mov	r7, r0
 80050be:	db01      	blt.n	80050c4 <_malloc_r+0x1c>
 80050c0:	42a9      	cmp	r1, r5
 80050c2:	d905      	bls.n	80050d0 <_malloc_r+0x28>
 80050c4:	230c      	movs	r3, #12
 80050c6:	2600      	movs	r6, #0
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4630      	mov	r0, r6
 80050cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051a4 <_malloc_r+0xfc>
 80050d4:	f000 f868 	bl	80051a8 <__malloc_lock>
 80050d8:	f8d8 3000 	ldr.w	r3, [r8]
 80050dc:	461c      	mov	r4, r3
 80050de:	bb5c      	cbnz	r4, 8005138 <_malloc_r+0x90>
 80050e0:	4629      	mov	r1, r5
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff ffc0 	bl	8005068 <sbrk_aligned>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	4604      	mov	r4, r0
 80050ec:	d155      	bne.n	800519a <_malloc_r+0xf2>
 80050ee:	f8d8 4000 	ldr.w	r4, [r8]
 80050f2:	4626      	mov	r6, r4
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	d145      	bne.n	8005184 <_malloc_r+0xdc>
 80050f8:	2c00      	cmp	r4, #0
 80050fa:	d048      	beq.n	800518e <_malloc_r+0xe6>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	4631      	mov	r1, r6
 8005100:	4638      	mov	r0, r7
 8005102:	eb04 0903 	add.w	r9, r4, r3
 8005106:	f000 fb61 	bl	80057cc <_sbrk_r>
 800510a:	4581      	cmp	r9, r0
 800510c:	d13f      	bne.n	800518e <_malloc_r+0xe6>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	4638      	mov	r0, r7
 8005112:	1a6d      	subs	r5, r5, r1
 8005114:	4629      	mov	r1, r5
 8005116:	f7ff ffa7 	bl	8005068 <sbrk_aligned>
 800511a:	3001      	adds	r0, #1
 800511c:	d037      	beq.n	800518e <_malloc_r+0xe6>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	442b      	add	r3, r5
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	f8d8 3000 	ldr.w	r3, [r8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d038      	beq.n	800519e <_malloc_r+0xf6>
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	42a2      	cmp	r2, r4
 8005130:	d12b      	bne.n	800518a <_malloc_r+0xe2>
 8005132:	2200      	movs	r2, #0
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	e00f      	b.n	8005158 <_malloc_r+0xb0>
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	1b52      	subs	r2, r2, r5
 800513c:	d41f      	bmi.n	800517e <_malloc_r+0xd6>
 800513e:	2a0b      	cmp	r2, #11
 8005140:	d917      	bls.n	8005172 <_malloc_r+0xca>
 8005142:	1961      	adds	r1, r4, r5
 8005144:	42a3      	cmp	r3, r4
 8005146:	6025      	str	r5, [r4, #0]
 8005148:	bf18      	it	ne
 800514a:	6059      	strne	r1, [r3, #4]
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	bf08      	it	eq
 8005150:	f8c8 1000 	streq.w	r1, [r8]
 8005154:	5162      	str	r2, [r4, r5]
 8005156:	604b      	str	r3, [r1, #4]
 8005158:	4638      	mov	r0, r7
 800515a:	f104 060b 	add.w	r6, r4, #11
 800515e:	f000 f829 	bl	80051b4 <__malloc_unlock>
 8005162:	f026 0607 	bic.w	r6, r6, #7
 8005166:	1d23      	adds	r3, r4, #4
 8005168:	1af2      	subs	r2, r6, r3
 800516a:	d0ae      	beq.n	80050ca <_malloc_r+0x22>
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	50a3      	str	r3, [r4, r2]
 8005170:	e7ab      	b.n	80050ca <_malloc_r+0x22>
 8005172:	42a3      	cmp	r3, r4
 8005174:	6862      	ldr	r2, [r4, #4]
 8005176:	d1dd      	bne.n	8005134 <_malloc_r+0x8c>
 8005178:	f8c8 2000 	str.w	r2, [r8]
 800517c:	e7ec      	b.n	8005158 <_malloc_r+0xb0>
 800517e:	4623      	mov	r3, r4
 8005180:	6864      	ldr	r4, [r4, #4]
 8005182:	e7ac      	b.n	80050de <_malloc_r+0x36>
 8005184:	4634      	mov	r4, r6
 8005186:	6876      	ldr	r6, [r6, #4]
 8005188:	e7b4      	b.n	80050f4 <_malloc_r+0x4c>
 800518a:	4613      	mov	r3, r2
 800518c:	e7cc      	b.n	8005128 <_malloc_r+0x80>
 800518e:	230c      	movs	r3, #12
 8005190:	4638      	mov	r0, r7
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	f000 f80e 	bl	80051b4 <__malloc_unlock>
 8005198:	e797      	b.n	80050ca <_malloc_r+0x22>
 800519a:	6025      	str	r5, [r4, #0]
 800519c:	e7dc      	b.n	8005158 <_malloc_r+0xb0>
 800519e:	605b      	str	r3, [r3, #4]
 80051a0:	deff      	udf	#255	; 0xff
 80051a2:	bf00      	nop
 80051a4:	20000448 	.word	0x20000448

080051a8 <__malloc_lock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_lock+0x8>)
 80051aa:	f7ff bf13 	b.w	8004fd4 <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000444 	.word	0x20000444

080051b4 <__malloc_unlock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__malloc_unlock+0x8>)
 80051b6:	f7ff bf0e 	b.w	8004fd6 <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	20000444 	.word	0x20000444

080051c0 <__ssputs_r>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	461f      	mov	r7, r3
 80051c6:	688e      	ldr	r6, [r1, #8]
 80051c8:	4682      	mov	sl, r0
 80051ca:	42be      	cmp	r6, r7
 80051cc:	460c      	mov	r4, r1
 80051ce:	4690      	mov	r8, r2
 80051d0:	680b      	ldr	r3, [r1, #0]
 80051d2:	d82c      	bhi.n	800522e <__ssputs_r+0x6e>
 80051d4:	898a      	ldrh	r2, [r1, #12]
 80051d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051da:	d026      	beq.n	800522a <__ssputs_r+0x6a>
 80051dc:	6965      	ldr	r5, [r4, #20]
 80051de:	6909      	ldr	r1, [r1, #16]
 80051e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051e4:	eba3 0901 	sub.w	r9, r3, r1
 80051e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051ec:	1c7b      	adds	r3, r7, #1
 80051ee:	444b      	add	r3, r9
 80051f0:	106d      	asrs	r5, r5, #1
 80051f2:	429d      	cmp	r5, r3
 80051f4:	bf38      	it	cc
 80051f6:	461d      	movcc	r5, r3
 80051f8:	0553      	lsls	r3, r2, #21
 80051fa:	d527      	bpl.n	800524c <__ssputs_r+0x8c>
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7ff ff53 	bl	80050a8 <_malloc_r>
 8005202:	4606      	mov	r6, r0
 8005204:	b360      	cbz	r0, 8005260 <__ssputs_r+0xa0>
 8005206:	464a      	mov	r2, r9
 8005208:	6921      	ldr	r1, [r4, #16]
 800520a:	f000 fafd 	bl	8005808 <memcpy>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	6126      	str	r6, [r4, #16]
 800521c:	444e      	add	r6, r9
 800521e:	6026      	str	r6, [r4, #0]
 8005220:	463e      	mov	r6, r7
 8005222:	6165      	str	r5, [r4, #20]
 8005224:	eba5 0509 	sub.w	r5, r5, r9
 8005228:	60a5      	str	r5, [r4, #8]
 800522a:	42be      	cmp	r6, r7
 800522c:	d900      	bls.n	8005230 <__ssputs_r+0x70>
 800522e:	463e      	mov	r6, r7
 8005230:	4632      	mov	r2, r6
 8005232:	4641      	mov	r1, r8
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	f000 faaf 	bl	8005798 <memmove>
 800523a:	2000      	movs	r0, #0
 800523c:	68a3      	ldr	r3, [r4, #8]
 800523e:	1b9b      	subs	r3, r3, r6
 8005240:	60a3      	str	r3, [r4, #8]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	4433      	add	r3, r6
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	462a      	mov	r2, r5
 800524e:	f000 fae9 	bl	8005824 <_realloc_r>
 8005252:	4606      	mov	r6, r0
 8005254:	2800      	cmp	r0, #0
 8005256:	d1e0      	bne.n	800521a <__ssputs_r+0x5a>
 8005258:	4650      	mov	r0, sl
 800525a:	6921      	ldr	r1, [r4, #16]
 800525c:	f7ff febc 	bl	8004fd8 <_free_r>
 8005260:	230c      	movs	r3, #12
 8005262:	f8ca 3000 	str.w	r3, [sl]
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	e7e9      	b.n	8005248 <__ssputs_r+0x88>

08005274 <_svfiprintf_r>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	4698      	mov	r8, r3
 800527a:	898b      	ldrh	r3, [r1, #12]
 800527c:	4607      	mov	r7, r0
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	460d      	mov	r5, r1
 8005282:	4614      	mov	r4, r2
 8005284:	b09d      	sub	sp, #116	; 0x74
 8005286:	d50e      	bpl.n	80052a6 <_svfiprintf_r+0x32>
 8005288:	690b      	ldr	r3, [r1, #16]
 800528a:	b963      	cbnz	r3, 80052a6 <_svfiprintf_r+0x32>
 800528c:	2140      	movs	r1, #64	; 0x40
 800528e:	f7ff ff0b 	bl	80050a8 <_malloc_r>
 8005292:	6028      	str	r0, [r5, #0]
 8005294:	6128      	str	r0, [r5, #16]
 8005296:	b920      	cbnz	r0, 80052a2 <_svfiprintf_r+0x2e>
 8005298:	230c      	movs	r3, #12
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	e0d0      	b.n	8005444 <_svfiprintf_r+0x1d0>
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	616b      	str	r3, [r5, #20]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9309      	str	r3, [sp, #36]	; 0x24
 80052aa:	2320      	movs	r3, #32
 80052ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b0:	2330      	movs	r3, #48	; 0x30
 80052b2:	f04f 0901 	mov.w	r9, #1
 80052b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800545c <_svfiprintf_r+0x1e8>
 80052be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c2:	4623      	mov	r3, r4
 80052c4:	469a      	mov	sl, r3
 80052c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ca:	b10a      	cbz	r2, 80052d0 <_svfiprintf_r+0x5c>
 80052cc:	2a25      	cmp	r2, #37	; 0x25
 80052ce:	d1f9      	bne.n	80052c4 <_svfiprintf_r+0x50>
 80052d0:	ebba 0b04 	subs.w	fp, sl, r4
 80052d4:	d00b      	beq.n	80052ee <_svfiprintf_r+0x7a>
 80052d6:	465b      	mov	r3, fp
 80052d8:	4622      	mov	r2, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	4638      	mov	r0, r7
 80052de:	f7ff ff6f 	bl	80051c0 <__ssputs_r>
 80052e2:	3001      	adds	r0, #1
 80052e4:	f000 80a9 	beq.w	800543a <_svfiprintf_r+0x1c6>
 80052e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ea:	445a      	add	r2, fp
 80052ec:	9209      	str	r2, [sp, #36]	; 0x24
 80052ee:	f89a 3000 	ldrb.w	r3, [sl]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80a1 	beq.w	800543a <_svfiprintf_r+0x1c6>
 80052f8:	2300      	movs	r3, #0
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005302:	f10a 0a01 	add.w	sl, sl, #1
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	9307      	str	r3, [sp, #28]
 800530a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800530e:	931a      	str	r3, [sp, #104]	; 0x68
 8005310:	4654      	mov	r4, sl
 8005312:	2205      	movs	r2, #5
 8005314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005318:	4850      	ldr	r0, [pc, #320]	; (800545c <_svfiprintf_r+0x1e8>)
 800531a:	f000 fa67 	bl	80057ec <memchr>
 800531e:	9a04      	ldr	r2, [sp, #16]
 8005320:	b9d8      	cbnz	r0, 800535a <_svfiprintf_r+0xe6>
 8005322:	06d0      	lsls	r0, r2, #27
 8005324:	bf44      	itt	mi
 8005326:	2320      	movmi	r3, #32
 8005328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800532c:	0711      	lsls	r1, r2, #28
 800532e:	bf44      	itt	mi
 8005330:	232b      	movmi	r3, #43	; 0x2b
 8005332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005336:	f89a 3000 	ldrb.w	r3, [sl]
 800533a:	2b2a      	cmp	r3, #42	; 0x2a
 800533c:	d015      	beq.n	800536a <_svfiprintf_r+0xf6>
 800533e:	4654      	mov	r4, sl
 8005340:	2000      	movs	r0, #0
 8005342:	f04f 0c0a 	mov.w	ip, #10
 8005346:	9a07      	ldr	r2, [sp, #28]
 8005348:	4621      	mov	r1, r4
 800534a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800534e:	3b30      	subs	r3, #48	; 0x30
 8005350:	2b09      	cmp	r3, #9
 8005352:	d94d      	bls.n	80053f0 <_svfiprintf_r+0x17c>
 8005354:	b1b0      	cbz	r0, 8005384 <_svfiprintf_r+0x110>
 8005356:	9207      	str	r2, [sp, #28]
 8005358:	e014      	b.n	8005384 <_svfiprintf_r+0x110>
 800535a:	eba0 0308 	sub.w	r3, r0, r8
 800535e:	fa09 f303 	lsl.w	r3, r9, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	46a2      	mov	sl, r4
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	e7d2      	b.n	8005310 <_svfiprintf_r+0x9c>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	1d19      	adds	r1, r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	9103      	str	r1, [sp, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	bfbb      	ittet	lt
 8005376:	425b      	neglt	r3, r3
 8005378:	f042 0202 	orrlt.w	r2, r2, #2
 800537c:	9307      	strge	r3, [sp, #28]
 800537e:	9307      	strlt	r3, [sp, #28]
 8005380:	bfb8      	it	lt
 8005382:	9204      	strlt	r2, [sp, #16]
 8005384:	7823      	ldrb	r3, [r4, #0]
 8005386:	2b2e      	cmp	r3, #46	; 0x2e
 8005388:	d10c      	bne.n	80053a4 <_svfiprintf_r+0x130>
 800538a:	7863      	ldrb	r3, [r4, #1]
 800538c:	2b2a      	cmp	r3, #42	; 0x2a
 800538e:	d134      	bne.n	80053fa <_svfiprintf_r+0x186>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	3402      	adds	r4, #2
 8005394:	1d1a      	adds	r2, r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	9203      	str	r2, [sp, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfb8      	it	lt
 800539e:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005460 <_svfiprintf_r+0x1ec>
 80053a8:	2203      	movs	r2, #3
 80053aa:	4650      	mov	r0, sl
 80053ac:	7821      	ldrb	r1, [r4, #0]
 80053ae:	f000 fa1d 	bl	80057ec <memchr>
 80053b2:	b138      	cbz	r0, 80053c4 <_svfiprintf_r+0x150>
 80053b4:	2240      	movs	r2, #64	; 0x40
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	eba0 000a 	sub.w	r0, r0, sl
 80053bc:	4082      	lsls	r2, r0
 80053be:	4313      	orrs	r3, r2
 80053c0:	3401      	adds	r4, #1
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c8:	2206      	movs	r2, #6
 80053ca:	4826      	ldr	r0, [pc, #152]	; (8005464 <_svfiprintf_r+0x1f0>)
 80053cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d0:	f000 fa0c 	bl	80057ec <memchr>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d038      	beq.n	800544a <_svfiprintf_r+0x1d6>
 80053d8:	4b23      	ldr	r3, [pc, #140]	; (8005468 <_svfiprintf_r+0x1f4>)
 80053da:	bb1b      	cbnz	r3, 8005424 <_svfiprintf_r+0x1b0>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	3307      	adds	r3, #7
 80053e0:	f023 0307 	bic.w	r3, r3, #7
 80053e4:	3308      	adds	r3, #8
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ea:	4433      	add	r3, r6
 80053ec:	9309      	str	r3, [sp, #36]	; 0x24
 80053ee:	e768      	b.n	80052c2 <_svfiprintf_r+0x4e>
 80053f0:	460c      	mov	r4, r1
 80053f2:	2001      	movs	r0, #1
 80053f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053f8:	e7a6      	b.n	8005348 <_svfiprintf_r+0xd4>
 80053fa:	2300      	movs	r3, #0
 80053fc:	f04f 0c0a 	mov.w	ip, #10
 8005400:	4619      	mov	r1, r3
 8005402:	3401      	adds	r4, #1
 8005404:	9305      	str	r3, [sp, #20]
 8005406:	4620      	mov	r0, r4
 8005408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800540c:	3a30      	subs	r2, #48	; 0x30
 800540e:	2a09      	cmp	r2, #9
 8005410:	d903      	bls.n	800541a <_svfiprintf_r+0x1a6>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0c6      	beq.n	80053a4 <_svfiprintf_r+0x130>
 8005416:	9105      	str	r1, [sp, #20]
 8005418:	e7c4      	b.n	80053a4 <_svfiprintf_r+0x130>
 800541a:	4604      	mov	r4, r0
 800541c:	2301      	movs	r3, #1
 800541e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005422:	e7f0      	b.n	8005406 <_svfiprintf_r+0x192>
 8005424:	ab03      	add	r3, sp, #12
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	462a      	mov	r2, r5
 800542a:	4638      	mov	r0, r7
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <_svfiprintf_r+0x1f8>)
 800542e:	a904      	add	r1, sp, #16
 8005430:	f3af 8000 	nop.w
 8005434:	1c42      	adds	r2, r0, #1
 8005436:	4606      	mov	r6, r0
 8005438:	d1d6      	bne.n	80053e8 <_svfiprintf_r+0x174>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	065b      	lsls	r3, r3, #25
 800543e:	f53f af2d 	bmi.w	800529c <_svfiprintf_r+0x28>
 8005442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005444:	b01d      	add	sp, #116	; 0x74
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	ab03      	add	r3, sp, #12
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	462a      	mov	r2, r5
 8005450:	4638      	mov	r0, r7
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <_svfiprintf_r+0x1f8>)
 8005454:	a904      	add	r1, sp, #16
 8005456:	f000 f87d 	bl	8005554 <_printf_i>
 800545a:	e7eb      	b.n	8005434 <_svfiprintf_r+0x1c0>
 800545c:	0800592e 	.word	0x0800592e
 8005460:	08005934 	.word	0x08005934
 8005464:	08005938 	.word	0x08005938
 8005468:	00000000 	.word	0x00000000
 800546c:	080051c1 	.word	0x080051c1

08005470 <_printf_common>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	4616      	mov	r6, r2
 8005476:	4699      	mov	r9, r3
 8005478:	688a      	ldr	r2, [r1, #8]
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	4607      	mov	r7, r0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfb8      	it	lt
 8005482:	4613      	movlt	r3, r2
 8005484:	6033      	str	r3, [r6, #0]
 8005486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800548a:	460c      	mov	r4, r1
 800548c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005490:	b10a      	cbz	r2, 8005496 <_printf_common+0x26>
 8005492:	3301      	adds	r3, #1
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	0699      	lsls	r1, r3, #26
 800549a:	bf42      	ittt	mi
 800549c:	6833      	ldrmi	r3, [r6, #0]
 800549e:	3302      	addmi	r3, #2
 80054a0:	6033      	strmi	r3, [r6, #0]
 80054a2:	6825      	ldr	r5, [r4, #0]
 80054a4:	f015 0506 	ands.w	r5, r5, #6
 80054a8:	d106      	bne.n	80054b8 <_printf_common+0x48>
 80054aa:	f104 0a19 	add.w	sl, r4, #25
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	6832      	ldr	r2, [r6, #0]
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	dc2b      	bgt.n	8005510 <_printf_common+0xa0>
 80054b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054bc:	1e13      	subs	r3, r2, #0
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	bf18      	it	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	0692      	lsls	r2, r2, #26
 80054c6:	d430      	bmi.n	800552a <_printf_common+0xba>
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d023      	beq.n	800551e <_printf_common+0xae>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	6922      	ldr	r2, [r4, #16]
 80054da:	f003 0306 	and.w	r3, r3, #6
 80054de:	2b04      	cmp	r3, #4
 80054e0:	bf14      	ite	ne
 80054e2:	2500      	movne	r5, #0
 80054e4:	6833      	ldreq	r3, [r6, #0]
 80054e6:	f04f 0600 	mov.w	r6, #0
 80054ea:	bf08      	it	eq
 80054ec:	68e5      	ldreq	r5, [r4, #12]
 80054ee:	f104 041a 	add.w	r4, r4, #26
 80054f2:	bf08      	it	eq
 80054f4:	1aed      	subeq	r5, r5, r3
 80054f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054fa:	bf08      	it	eq
 80054fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005500:	4293      	cmp	r3, r2
 8005502:	bfc4      	itt	gt
 8005504:	1a9b      	subgt	r3, r3, r2
 8005506:	18ed      	addgt	r5, r5, r3
 8005508:	42b5      	cmp	r5, r6
 800550a:	d11a      	bne.n	8005542 <_printf_common+0xd2>
 800550c:	2000      	movs	r0, #0
 800550e:	e008      	b.n	8005522 <_printf_common+0xb2>
 8005510:	2301      	movs	r3, #1
 8005512:	4652      	mov	r2, sl
 8005514:	4649      	mov	r1, r9
 8005516:	4638      	mov	r0, r7
 8005518:	47c0      	blx	r8
 800551a:	3001      	adds	r0, #1
 800551c:	d103      	bne.n	8005526 <_printf_common+0xb6>
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005526:	3501      	adds	r5, #1
 8005528:	e7c1      	b.n	80054ae <_printf_common+0x3e>
 800552a:	2030      	movs	r0, #48	; 0x30
 800552c:	18e1      	adds	r1, r4, r3
 800552e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005538:	4422      	add	r2, r4
 800553a:	3302      	adds	r3, #2
 800553c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005540:	e7c2      	b.n	80054c8 <_printf_common+0x58>
 8005542:	2301      	movs	r3, #1
 8005544:	4622      	mov	r2, r4
 8005546:	4649      	mov	r1, r9
 8005548:	4638      	mov	r0, r7
 800554a:	47c0      	blx	r8
 800554c:	3001      	adds	r0, #1
 800554e:	d0e6      	beq.n	800551e <_printf_common+0xae>
 8005550:	3601      	adds	r6, #1
 8005552:	e7d9      	b.n	8005508 <_printf_common+0x98>

08005554 <_printf_i>:
 8005554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	7e0f      	ldrb	r7, [r1, #24]
 800555a:	4691      	mov	r9, r2
 800555c:	2f78      	cmp	r7, #120	; 0x78
 800555e:	4680      	mov	r8, r0
 8005560:	460c      	mov	r4, r1
 8005562:	469a      	mov	sl, r3
 8005564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800556a:	d807      	bhi.n	800557c <_printf_i+0x28>
 800556c:	2f62      	cmp	r7, #98	; 0x62
 800556e:	d80a      	bhi.n	8005586 <_printf_i+0x32>
 8005570:	2f00      	cmp	r7, #0
 8005572:	f000 80d5 	beq.w	8005720 <_printf_i+0x1cc>
 8005576:	2f58      	cmp	r7, #88	; 0x58
 8005578:	f000 80c1 	beq.w	80056fe <_printf_i+0x1aa>
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005584:	e03a      	b.n	80055fc <_printf_i+0xa8>
 8005586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800558a:	2b15      	cmp	r3, #21
 800558c:	d8f6      	bhi.n	800557c <_printf_i+0x28>
 800558e:	a101      	add	r1, pc, #4	; (adr r1, 8005594 <_printf_i+0x40>)
 8005590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005594:	080055ed 	.word	0x080055ed
 8005598:	08005601 	.word	0x08005601
 800559c:	0800557d 	.word	0x0800557d
 80055a0:	0800557d 	.word	0x0800557d
 80055a4:	0800557d 	.word	0x0800557d
 80055a8:	0800557d 	.word	0x0800557d
 80055ac:	08005601 	.word	0x08005601
 80055b0:	0800557d 	.word	0x0800557d
 80055b4:	0800557d 	.word	0x0800557d
 80055b8:	0800557d 	.word	0x0800557d
 80055bc:	0800557d 	.word	0x0800557d
 80055c0:	08005707 	.word	0x08005707
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	080056c1 	.word	0x080056c1
 80055cc:	0800557d 	.word	0x0800557d
 80055d0:	0800557d 	.word	0x0800557d
 80055d4:	08005729 	.word	0x08005729
 80055d8:	0800557d 	.word	0x0800557d
 80055dc:	0800562d 	.word	0x0800562d
 80055e0:	0800557d 	.word	0x0800557d
 80055e4:	0800557d 	.word	0x0800557d
 80055e8:	080056c9 	.word	0x080056c9
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	602a      	str	r2, [r5, #0]
 80055f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0a0      	b.n	8005742 <_printf_i+0x1ee>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	0607      	lsls	r7, r0, #24
 8005606:	f103 0104 	add.w	r1, r3, #4
 800560a:	6029      	str	r1, [r5, #0]
 800560c:	d501      	bpl.n	8005612 <_printf_i+0xbe>
 800560e:	681e      	ldr	r6, [r3, #0]
 8005610:	e003      	b.n	800561a <_printf_i+0xc6>
 8005612:	0646      	lsls	r6, r0, #25
 8005614:	d5fb      	bpl.n	800560e <_printf_i+0xba>
 8005616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800561a:	2e00      	cmp	r6, #0
 800561c:	da03      	bge.n	8005626 <_printf_i+0xd2>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	4276      	negs	r6, r6
 8005622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005626:	230a      	movs	r3, #10
 8005628:	4859      	ldr	r0, [pc, #356]	; (8005790 <_printf_i+0x23c>)
 800562a:	e012      	b.n	8005652 <_printf_i+0xfe>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	6029      	str	r1, [r5, #0]
 8005634:	0605      	lsls	r5, r0, #24
 8005636:	d501      	bpl.n	800563c <_printf_i+0xe8>
 8005638:	681e      	ldr	r6, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0xee>
 800563c:	0641      	lsls	r1, r0, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0xe4>
 8005640:	881e      	ldrh	r6, [r3, #0]
 8005642:	2f6f      	cmp	r7, #111	; 0x6f
 8005644:	bf0c      	ite	eq
 8005646:	2308      	moveq	r3, #8
 8005648:	230a      	movne	r3, #10
 800564a:	4851      	ldr	r0, [pc, #324]	; (8005790 <_printf_i+0x23c>)
 800564c:	2100      	movs	r1, #0
 800564e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005652:	6865      	ldr	r5, [r4, #4]
 8005654:	2d00      	cmp	r5, #0
 8005656:	bfa8      	it	ge
 8005658:	6821      	ldrge	r1, [r4, #0]
 800565a:	60a5      	str	r5, [r4, #8]
 800565c:	bfa4      	itt	ge
 800565e:	f021 0104 	bicge.w	r1, r1, #4
 8005662:	6021      	strge	r1, [r4, #0]
 8005664:	b90e      	cbnz	r6, 800566a <_printf_i+0x116>
 8005666:	2d00      	cmp	r5, #0
 8005668:	d04b      	beq.n	8005702 <_printf_i+0x1ae>
 800566a:	4615      	mov	r5, r2
 800566c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005670:	fb03 6711 	mls	r7, r3, r1, r6
 8005674:	5dc7      	ldrb	r7, [r0, r7]
 8005676:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800567a:	4637      	mov	r7, r6
 800567c:	42bb      	cmp	r3, r7
 800567e:	460e      	mov	r6, r1
 8005680:	d9f4      	bls.n	800566c <_printf_i+0x118>
 8005682:	2b08      	cmp	r3, #8
 8005684:	d10b      	bne.n	800569e <_printf_i+0x14a>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	07de      	lsls	r6, r3, #31
 800568a:	d508      	bpl.n	800569e <_printf_i+0x14a>
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	6861      	ldr	r1, [r4, #4]
 8005690:	4299      	cmp	r1, r3
 8005692:	bfde      	ittt	le
 8005694:	2330      	movle	r3, #48	; 0x30
 8005696:	f805 3c01 	strble.w	r3, [r5, #-1]
 800569a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800569e:	1b52      	subs	r2, r2, r5
 80056a0:	6122      	str	r2, [r4, #16]
 80056a2:	464b      	mov	r3, r9
 80056a4:	4621      	mov	r1, r4
 80056a6:	4640      	mov	r0, r8
 80056a8:	f8cd a000 	str.w	sl, [sp]
 80056ac:	aa03      	add	r2, sp, #12
 80056ae:	f7ff fedf 	bl	8005470 <_printf_common>
 80056b2:	3001      	adds	r0, #1
 80056b4:	d14a      	bne.n	800574c <_printf_i+0x1f8>
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	b004      	add	sp, #16
 80056bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	f043 0320 	orr.w	r3, r3, #32
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	2778      	movs	r7, #120	; 0x78
 80056ca:	4832      	ldr	r0, [pc, #200]	; (8005794 <_printf_i+0x240>)
 80056cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	6829      	ldr	r1, [r5, #0]
 80056d4:	061f      	lsls	r7, r3, #24
 80056d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80056da:	d402      	bmi.n	80056e2 <_printf_i+0x18e>
 80056dc:	065f      	lsls	r7, r3, #25
 80056de:	bf48      	it	mi
 80056e0:	b2b6      	uxthmi	r6, r6
 80056e2:	07df      	lsls	r7, r3, #31
 80056e4:	bf48      	it	mi
 80056e6:	f043 0320 	orrmi.w	r3, r3, #32
 80056ea:	6029      	str	r1, [r5, #0]
 80056ec:	bf48      	it	mi
 80056ee:	6023      	strmi	r3, [r4, #0]
 80056f0:	b91e      	cbnz	r6, 80056fa <_printf_i+0x1a6>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	f023 0320 	bic.w	r3, r3, #32
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	2310      	movs	r3, #16
 80056fc:	e7a6      	b.n	800564c <_printf_i+0xf8>
 80056fe:	4824      	ldr	r0, [pc, #144]	; (8005790 <_printf_i+0x23c>)
 8005700:	e7e4      	b.n	80056cc <_printf_i+0x178>
 8005702:	4615      	mov	r5, r2
 8005704:	e7bd      	b.n	8005682 <_printf_i+0x12e>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	6826      	ldr	r6, [r4, #0]
 800570a:	1d18      	adds	r0, r3, #4
 800570c:	6961      	ldr	r1, [r4, #20]
 800570e:	6028      	str	r0, [r5, #0]
 8005710:	0635      	lsls	r5, r6, #24
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	d501      	bpl.n	800571a <_printf_i+0x1c6>
 8005716:	6019      	str	r1, [r3, #0]
 8005718:	e002      	b.n	8005720 <_printf_i+0x1cc>
 800571a:	0670      	lsls	r0, r6, #25
 800571c:	d5fb      	bpl.n	8005716 <_printf_i+0x1c2>
 800571e:	8019      	strh	r1, [r3, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	4615      	mov	r5, r2
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	e7bc      	b.n	80056a2 <_printf_i+0x14e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	2100      	movs	r1, #0
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	602a      	str	r2, [r5, #0]
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	6862      	ldr	r2, [r4, #4]
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f859 	bl	80057ec <memchr>
 800573a:	b108      	cbz	r0, 8005740 <_printf_i+0x1ec>
 800573c:	1b40      	subs	r0, r0, r5
 800573e:	6060      	str	r0, [r4, #4]
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	2300      	movs	r3, #0
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574a:	e7aa      	b.n	80056a2 <_printf_i+0x14e>
 800574c:	462a      	mov	r2, r5
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	47d0      	blx	sl
 8005756:	3001      	adds	r0, #1
 8005758:	d0ad      	beq.n	80056b6 <_printf_i+0x162>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	079b      	lsls	r3, r3, #30
 800575e:	d413      	bmi.n	8005788 <_printf_i+0x234>
 8005760:	68e0      	ldr	r0, [r4, #12]
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	4298      	cmp	r0, r3
 8005766:	bfb8      	it	lt
 8005768:	4618      	movlt	r0, r3
 800576a:	e7a6      	b.n	80056ba <_printf_i+0x166>
 800576c:	2301      	movs	r3, #1
 800576e:	4632      	mov	r2, r6
 8005770:	4649      	mov	r1, r9
 8005772:	4640      	mov	r0, r8
 8005774:	47d0      	blx	sl
 8005776:	3001      	adds	r0, #1
 8005778:	d09d      	beq.n	80056b6 <_printf_i+0x162>
 800577a:	3501      	adds	r5, #1
 800577c:	68e3      	ldr	r3, [r4, #12]
 800577e:	9903      	ldr	r1, [sp, #12]
 8005780:	1a5b      	subs	r3, r3, r1
 8005782:	42ab      	cmp	r3, r5
 8005784:	dcf2      	bgt.n	800576c <_printf_i+0x218>
 8005786:	e7eb      	b.n	8005760 <_printf_i+0x20c>
 8005788:	2500      	movs	r5, #0
 800578a:	f104 0619 	add.w	r6, r4, #25
 800578e:	e7f5      	b.n	800577c <_printf_i+0x228>
 8005790:	0800593f 	.word	0x0800593f
 8005794:	08005950 	.word	0x08005950

08005798 <memmove>:
 8005798:	4288      	cmp	r0, r1
 800579a:	b510      	push	{r4, lr}
 800579c:	eb01 0402 	add.w	r4, r1, r2
 80057a0:	d902      	bls.n	80057a8 <memmove+0x10>
 80057a2:	4284      	cmp	r4, r0
 80057a4:	4623      	mov	r3, r4
 80057a6:	d807      	bhi.n	80057b8 <memmove+0x20>
 80057a8:	1e43      	subs	r3, r0, #1
 80057aa:	42a1      	cmp	r1, r4
 80057ac:	d008      	beq.n	80057c0 <memmove+0x28>
 80057ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057b6:	e7f8      	b.n	80057aa <memmove+0x12>
 80057b8:	4601      	mov	r1, r0
 80057ba:	4402      	add	r2, r0
 80057bc:	428a      	cmp	r2, r1
 80057be:	d100      	bne.n	80057c2 <memmove+0x2a>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ca:	e7f7      	b.n	80057bc <memmove+0x24>

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	4d05      	ldr	r5, [pc, #20]	; (80057e8 <_sbrk_r+0x1c>)
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fc faec 	bl	8001db4 <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20000440 	.word	0x20000440

080057ec <memchr>:
 80057ec:	4603      	mov	r3, r0
 80057ee:	b510      	push	{r4, lr}
 80057f0:	b2c9      	uxtb	r1, r1
 80057f2:	4402      	add	r2, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	d101      	bne.n	80057fe <memchr+0x12>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e003      	b.n	8005806 <memchr+0x1a>
 80057fe:	7804      	ldrb	r4, [r0, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	428c      	cmp	r4, r1
 8005804:	d1f6      	bne.n	80057f4 <memchr+0x8>
 8005806:	bd10      	pop	{r4, pc}

08005808 <memcpy>:
 8005808:	440a      	add	r2, r1
 800580a:	4291      	cmp	r1, r2
 800580c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005810:	d100      	bne.n	8005814 <memcpy+0xc>
 8005812:	4770      	bx	lr
 8005814:	b510      	push	{r4, lr}
 8005816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581a:	4291      	cmp	r1, r2
 800581c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005820:	d1f9      	bne.n	8005816 <memcpy+0xe>
 8005822:	bd10      	pop	{r4, pc}

08005824 <_realloc_r>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	4680      	mov	r8, r0
 800582a:	4614      	mov	r4, r2
 800582c:	460e      	mov	r6, r1
 800582e:	b921      	cbnz	r1, 800583a <_realloc_r+0x16>
 8005830:	4611      	mov	r1, r2
 8005832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	f7ff bc37 	b.w	80050a8 <_malloc_r>
 800583a:	b92a      	cbnz	r2, 8005848 <_realloc_r+0x24>
 800583c:	f7ff fbcc 	bl	8004fd8 <_free_r>
 8005840:	4625      	mov	r5, r4
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005848:	f000 f81b 	bl	8005882 <_malloc_usable_size_r>
 800584c:	4284      	cmp	r4, r0
 800584e:	4607      	mov	r7, r0
 8005850:	d802      	bhi.n	8005858 <_realloc_r+0x34>
 8005852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005856:	d812      	bhi.n	800587e <_realloc_r+0x5a>
 8005858:	4621      	mov	r1, r4
 800585a:	4640      	mov	r0, r8
 800585c:	f7ff fc24 	bl	80050a8 <_malloc_r>
 8005860:	4605      	mov	r5, r0
 8005862:	2800      	cmp	r0, #0
 8005864:	d0ed      	beq.n	8005842 <_realloc_r+0x1e>
 8005866:	42bc      	cmp	r4, r7
 8005868:	4622      	mov	r2, r4
 800586a:	4631      	mov	r1, r6
 800586c:	bf28      	it	cs
 800586e:	463a      	movcs	r2, r7
 8005870:	f7ff ffca 	bl	8005808 <memcpy>
 8005874:	4631      	mov	r1, r6
 8005876:	4640      	mov	r0, r8
 8005878:	f7ff fbae 	bl	8004fd8 <_free_r>
 800587c:	e7e1      	b.n	8005842 <_realloc_r+0x1e>
 800587e:	4635      	mov	r5, r6
 8005880:	e7df      	b.n	8005842 <_realloc_r+0x1e>

08005882 <_malloc_usable_size_r>:
 8005882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005886:	1f18      	subs	r0, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfbc      	itt	lt
 800588c:	580b      	ldrlt	r3, [r1, r0]
 800588e:	18c0      	addlt	r0, r0, r3
 8005890:	4770      	bx	lr
	...

08005894 <_init>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr

080058a0 <_fini>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr
